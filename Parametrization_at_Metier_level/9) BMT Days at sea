---
title: "9) BEMTool Days at sea"
author: "Andrea Pierucci and Isabella Bitetto"
date: '2022-03-25'
output:
  #bookdown::pdf_book:
  pdf_document: default
  #html_document: default
header-includes:
    - \usepackage{ragged2e}
    - \usepackage{multirow}
    - \usepackage{setspace}\doublespacing
---

```{r}
# packages requested

rm(list=ls())
FINALDF<-read.csv("D:\\Andrea\\Desktop\\revision Bemtool\\metier\\vessels\\FINALDF_VESSEL_metier_new.csv")

library(readxl)
library(tidyverse)
library(tidyr)
# STEP  1 #===================================================================

# Below an example of fishing days.csv file for BEMTool.
# For this example we use Italian FDI official data Table G (EFFORT)
# set your working directory 

wd<-"D:/Andrea/Desktop/FISH Stock Assessment/STECF 2022/Effort regime/SET/DATA/FDI"
(RECENTDATADAY<-read.csv(paste0(wd,"/tableG_EWG2211.csv"), sep = ","))

(RECENTDATADAY<-separate(RECENTDATADAY, col=metier, into=c("A","B"), sep="_", remove = T))
(RECENTDATADAY<-RECENTDATADAY[,c(1,2,3,4,5,10,12,17)])
colnames(RECENTDATADAY)[6]<-"metier"
COUNTRY<-"ITA"
GSAs<-c("GSA9","GSA10") # please select your GSAs
FT1<-"DTS"
LOA1<-c("VL0612","VL1218","VL1824","VL2440")
MET<-c("DEF","DWS","MDD")
lastyear<-2021 # define the last available year of your data 
# ===================================== DTS 
(DATA_DAY_A<-RECENTDATADAY%>% 
    select(country_code,year,quarter,sub_region,vessel_length,fishing_tech,metier,totseadays)%>%
    filter(country_code%in%COUNTRY & fishing_tech%in%FT1 & vessel_length%in%LOA1 & sub_region%in%GSAs & metier%in%MET)%>%
    group_by(country_code,year,quarter,sub_region,vessel_length,fishing_tech,metier)%>%
    summarise(totseadays=sum(totseadays)))

# You need to check if you have all the segments in all GSAs and all years
(Vessel.Length.Category<-rep(rep(rep(c(unique(DATA_DAY_A$vessel_length)[1],rep(unique(DATA_DAY_A$vessel_length)[2:4],each=3)),each=4),length(unique(DATA_DAY_A$year))),length(GSAs)))
(metier<-rep(rep( c(rep(unique(DATA_DAY_A$metier)[1],4), rep(unique(DATA_DAY_A$metier),each=4),  rep(unique(DATA_DAY_A$metier),each=4),  rep(unique(DATA_DAY_A$metier),each=4)), length(unique(DATA_DAY_A$year))),length(GSAs)))
(year<-rep(rep(unique(DATA_DAY_A$year),each=(length(c(unique(DATA_DAY_A$vessel_length)[1],rep(unique(DATA_DAY_A$vessel_length)[2:4],each=3)))*4)),length(GSAs)))
(principal.sub.region<-rep(GSAs,each=(length(Vessel.Length.Category)/length(GSAs))))
(data_check<-data.frame(year,principal.sub.region,Vessel.Length.Category,metier))
(data_check$quarter<-c(1:4))
(data_check$Country.name<-COUNTRY)
(data_check$Fishing.Technique<-FT1)
(data_check$totseadays<-0)


# now you merge the two data frame and you have all fleet segments for all GSAs in all year. The missing fleet segment have been replaced with 0s.
(DATA_DAY_A<-DATA_DAY_A[,c(1,2,3,4,6,5,7,8)]%>%unite("FS",country_code:metier, remove = T, sep = "_"))
(data_check<-data_check[,c(6,1,5,2, 7,3,4,8)]%>%unite("FS",Country.name:metier, remove = T, sep = "_"))

(DATA_DAY_A<-merge(DATA_DAY_A,data_check,  by.x ="FS", by.y="FS", all.x = F, all.y = T))
(DATA_DAY_A[is.na(DATA_DAY_A)] = 0.00001)
(DATA_DAY_A<-DATA_DAY_A[,c(1,2)])
colnames(DATA_DAY_A)[2]<-"totseadays"

# I need to add the gear for label consistency 
DATA_DAY_A$gear<-"OTB"
(DATA_DAY_A<-separate(DATA_DAY_A, col=FS, into=c("A","B","C","D","E","FF","G"), sep="_"))


(DATA_DAY_A<-DATA_DAY_A[,c(1,2,3,4,5,6,7,9,8)]%>%unite("FS",D:gear, remove = T, sep = "_"))
colnames(DATA_DAY_A)[1]<-"country_code"
colnames(DATA_DAY_A)[2]<-"year"
colnames(DATA_DAY_A)[3]<-"quarter"


# At this time a need to aggregate pgp VL0006 with VL0612 as VL0012. This kind of aggregation are defined by the user.
#==================================== PGP 

# below some aggregation for some PGP LOA
# this aggregation are totally arbitrary 

COUNTRY<-"ITA"
GSAs<-c("GSA9","GSA10")
FT2<-"PGP"
LOA2<-c("VL0006","VL0612")
LOA3<-c("VL1218")


(DATA_DAY_B1<-RECENTDATADAY%>% 
    select(country_code,year,quarter,vessel_length,fishing_tech,sub_region,totseadays)%>%
    filter(country_code%in%COUNTRY & fishing_tech%in%FT2 & vessel_length%in%LOA2 & sub_region%in%GSAs)%>%
    group_by(country_code,year,quarter,fishing_tech,sub_region)%>%
    summarise(totseadays=sum(totseadays)))

DATA_DAY_B1$vessel_length<-"VL0012"

# You need to check if you have all the segments in all GSAs and all years 

(Vessel.Length.Category<-rep(rep(rep(unique(DATA_DAY_B1$vessel_length),4),length(GSAs)),length(unique(DATA_DAY_B1$year))))
(quarters<-rep(rep(rep(c(1:4),each=length(unique(DATA_DAY_B1$vessel_length))),length(unique(DATA_DAY_B1$year))),length(GSAs)))
(year<-rep(rep(unique(DATA_DAY_B1$year),each=(length(unique(DATA_DAY_B1$vessel_length))*4)),length(GSAs)))
(principal.sub.region<-rep(GSAs,each=(length(Vessel.Length.Category)/length(GSAs))))
(data_check<-data.frame(Vessel.Length.Category,quarters,year,principal.sub.region))
(data_check$Country.name<-COUNTRY)
(data_check$Fishing.Technique<-FT2)
(data_check$totseadays<-0)

# now you merge the two data frame and you have all fleet segments for all GSAs in all year. The missing fleet segment have been replaced with 0s.
(DATA_DAY_B1<-DATA_DAY_B1[,c(1,2,3,5,4,7,6)]%>%unite("FS",country_code:vessel_length, remove = T, sep = "_"))
(data_check<-data_check[,c(5,3,2,4,6,1,7)]%>%unite("FS",Country.name:Vessel.Length.Category, remove = T, sep = "_"))
(DATA_DAY_B1<-merge(DATA_DAY_B1,data_check,  by.x ="FS", by.y="FS", all.x = F, all.y = T))
(DATA_DAY_B1[is.na(DATA_DAY_B1)] = 0.00001)
(DATA_DAY_B1<-DATA_DAY_B1[,c(1,2)])
colnames(DATA_DAY_B1)[2]<-"totseadays"

(DATA_DAY_B2<-RECENTDATADAY%>%
    select(country_code,year,quarter,vessel_length,sub_region,fishing_tech,totseadays)%>%
    filter(country_code%in%COUNTRY & fishing_tech%in%FT2 & vessel_length%in%LOA3 & sub_region%in%GSAs)%>%
    group_by(country_code,year,quarter,sub_region,fishing_tech,vessel_length)%>%
    summarise(totseadays=sum(as.numeric(totseadays))))

# You need to check if you have all the segments in all GSAs and all years 

(Vessel.Length.Category<-rep(rep(rep(unique(DATA_DAY_B2$vessel_length),4),length(GSAs)),length(unique(DATA_DAY_B2$year))))
(quarters<-rep(rep(rep(c(1:4),each=length(unique(DATA_DAY_B2$vessel_length))),length(unique(DATA_DAY_B2$year))),length(GSAs)))
(year<-rep(rep(unique(DATA_DAY_B2$year),each=(length(unique(DATA_DAY_B2$vessel_length))*4)),length(GSAs)))
(principal.sub.region<-rep(GSAs,each=(length(Vessel.Length.Category)/length(GSAs))))
(data_check<-data.frame(Vessel.Length.Category,quarters,year,principal.sub.region))
(data_check$Country.name<-COUNTRY)
(data_check$Fishing.Technique<-FT2)
(data_check$totseadays<-0)

# now you merge the two data frame and you have all fleet segments for all GSAs in all year. The missing fleet segment have been replaced with 0s.
(DATA_DAY_B2<-DATA_DAY_B2%>%unite("FS",country_code:vessel_length, remove = T, sep = "_"))
(data_check<-data_check[,c(5,3,2,4,6,1,7)]%>%unite("FS",Country.name:Vessel.Length.Category, remove = T, sep = "_"))
(DATA_DAY_B2<-merge(DATA_DAY_B2,data_check,  by.x ="FS", by.y="FS", all.x = F, all.y = T))
(DATA_DAY_B2[is.na(DATA_DAY_B2)] = 0.00001)
(DATA_DAY_B2<-DATA_DAY_B2[,c(1,2)])
colnames(DATA_DAY_B2)[2]<-"totseadays"
(DATA_DAY_B12<-rbind(DATA_DAY_B1,DATA_DAY_B2))
(DATA_DAY_B12<-separate(DATA_DAY_B12, col=FS, into=c("A","B","C","D","E","FF"), sep="_"))
(DATA_DAY_B12<-DATA_DAY_B12%>%unite("FS",D:FF, remove = T, sep = "_"))
colnames(DATA_DAY_B12)[1]<-"country_code"
colnames(DATA_DAY_B12)[2]<-"year"
colnames(DATA_DAY_B12)[3]<-"quarter"
(DATA_DAY<-rbind(DATA_DAY_A,DATA_DAY_B12))
# now I need to split each quarter in 3 
(DATA_DAY<-rbind(DATA_DAY,DATA_DAY,DATA_DAY))
(DATA_DAY<-DATA_DAY%>%arrange(year,FS,quarter))
(DATA_DAY$true_totseadays<-DATA_DAY$totseadays/3)
(DATA_DAY$Month<-c(1:12))
DATA_DAY$Unit<-"Days"
DATA_DAY$Source<-"FDI_capacity_by_country"
(DATA_DAY<-DATA_DAY[,c(1,2,4,7,6,8,9)])
colnames(DATA_DAY)[5]<-"totseadays"

(DATA_DAY<-separate(DATA_DAY, col=FS, into=c("A","B","C"), sep="_"))
colnames(DATA_DAY)[3]<-"sub_reg"
colnames(DATA_DAY)[4]<-"fishing_tech"
colnames(DATA_DAY)[5]<-"vessel_length"

# Test 2 #=================================================================================================
# Here the extraction of the data from 2008 to 2013

dir<-"D:/Andrea/Desktop/NEW_BEMTool/2018-07_STECF_18-07-EU_Fleet_Effort_FAO_Gear_levels_final.xlsx"

(OLD_DATA_DAYS<-read_xlsx(dir, sheet = 2))
(OLD_DATA_DAYS<-separate(OLD_DATA_DAYS, col=sub_reg, into=c("A","B"), sep=" "))
(OLD_DATA_DAYS$A[OLD_DATA_DAYS$A=="sa"]<-"GSA")
(OLD_DATA_DAYS<-OLD_DATA_DAYS%>%unite("sub_reg",A:B, remove = T, sep = ""))
# First I group all the GSAs 

CC<-"ITA"
yearx<-2013 # indicate the last year of FDI available data at a GSAs level
yeary<-2008 # indicate the first year of FDI available data at a GSAs level


(OLD_DATA_DAYS_DTS<-OLD_DATA_DAYS%>%
    select(country_code,year,fishing_tech,variable_code,sub_reg,vessel_length,value,unit)%>%
    filter(country_code%in%CC, year<yearx & variable_code%in%"totseadays" & fishing_tech%in%FT1  & vessel_length%in%LOA1 & sub_reg%in%GSAs))

(OLD_DATA_DAYS_PGP_1<-OLD_DATA_DAYS%>%
    select(country_code,year,fishing_tech,variable_code,sub_reg,vessel_length,value,unit)%>%
    filter(country_code%in%CC, year<yearx & variable_code%in%"totseadays" & fishing_tech%in%FT2 & vessel_length%in%LOA2 & sub_reg%in%GSAs)%>%
    group_by(country_code,year,fishing_tech,variable_code,sub_reg,unit)%>%
    summarise(value=sum(as.numeric(value))))
OLD_DATA_DAYS_PGP_1$vessel_length<-"VL0012"

(OLD_DATA_DAYS_PGP_2<-OLD_DATA_DAYS%>%
    select(country_code,year,fishing_tech,variable_code,sub_reg,vessel_length,value,unit)%>%
    filter(country_code%in%CC, year<yearx & variable_code%in%"totseadays" & fishing_tech%in%FT2 & vessel_length%in%LOA3 & sub_reg%in%GSAs)%>%
    group_by(country_code,year,fishing_tech,variable_code,sub_reg,vessel_length,unit)%>%
    summarise(value=sum(as.numeric(value))))

(OLD_DATA_DAYS<-rbind(OLD_DATA_DAYS_DTS,OLD_DATA_DAYS_PGP_1,OLD_DATA_DAYS_PGP_2))
(OLD_DATA_DAYS<-OLD_DATA_DAYS%>%arrange(year,fishing_tech,vessel_length))

# Some time you have some missing data in some specific years. 
# NB all the csv INPUT file in BMT shall have the same time series length. 
# In this example you need to create the absent 2006 and 2007 data equal to 2008.
(OLD_DATA_2006<-OLD_DATA_DAYS%>%filter(year%in%yeary))

# some time there are missing values or segments please check it with the following lines and add for missing values

(Vessel.Length.Category<-rep(c(sort(unique(OLD_DATA_DAYS$vessel_length))[2:5],sort(unique(OLD_DATA_DAYS$vessel_length))[c(1,3)]),length(GSAs)))

(principal.sub.region<-rep(GSAs,each=(length(Vessel.Length.Category)/length(GSAs))))
(Fishing.Technique<-rep(c(rep(FT1,4),rep(FT2,2)),length(GSAs)))

(data_check<-data.frame(Vessel.Length.Category,principal.sub.region,Fishing.Technique))
(data_check$Country.name<-COUNTRY)
(data_check$unit<-"day")
(data_check$year<-yeary)
(data_check$value<-0)
(data_check$variable_code<-"totseadays")

# now you merge the two data frame and you have all fleet segments for all GSAs in all year. The missing fleet segment have been replaced with 0s.
(OLD_DATA_2006<-OLD_DATA_2006[,c(1,2,5,3,6,8,7,4)]%>%unite("FS",country_code:vessel_length, remove = T, sep = "_"))
(data_check<-data_check[,c(4,6,2,3,1,5,7,8)]%>%unite("FS",Country.name:Vessel.Length.Category, remove = T, sep = "_"))
(OLD_DATA_DAYS_plus<-merge(OLD_DATA_2006,data_check,  by.x ="FS", by.y="FS", all.x = F, all.y = T))
(OLD_DATA_DAYS_plus[is.na(OLD_DATA_DAYS_plus)] = 0.00001)
(OLD_DATA_DAYS_plus<-OLD_DATA_DAYS_plus[,c(1,3,5,7)])
colnames(OLD_DATA_DAYS_plus)[2]<-"value"
colnames(OLD_DATA_DAYS_plus)[3]<-"unit"
colnames(OLD_DATA_DAYS_plus)[4]<-"variable_code"

(OLD_DATA_DAYS_plus<-separate(OLD_DATA_DAYS_plus, col=FS, into=c("A","B","C","D","E"), sep="_"))

colnames(OLD_DATA_DAYS_plus)[1]<-"country_code"
colnames(OLD_DATA_DAYS_plus)[2]<-"year"
colnames(OLD_DATA_DAYS_plus)[3]<-"sub_reg"
colnames(OLD_DATA_DAYS_plus)[4]<-"fishing_tech"
colnames(OLD_DATA_DAYS_plus)[5]<-"vessel_length"

(OLD_DATA_DAYS_plus_2006<-OLD_DATA_DAYS_plus_2007<-OLD_DATA_DAYS_plus)
OLD_DATA_DAYS_plus_2007$year<-"2007"
OLD_DATA_DAYS_plus_2006$year<-"2006"


# merge all the old data set 
(OLD_DATA_4<-rbind(OLD_DATA_DAYS_plus_2006,OLD_DATA_DAYS_plus_2007,OLD_DATA_DAYS))

OLD_DATA_4$Source<-"STECF_21-08_EU_Fleet_Economic_and_Transversal_data_fleet_segment"
OLD_DATA_4$Month<-0 
OLD_DATA_4$unit<-"Days"
colnames(OLD_DATA_4)[7]<-"Unit"
(OLD_DATA_4<-OLD_DATA_4[,c(1:5,10,6,7,9)])

(OLD_DATA_4<-OLD_DATA_4%>%unite("FS",c(sub_reg:vessel_length), remove = T))


# buplicate the the data frame for the amount of months and divided by 12

data<-list()

for (i in 1:12){
  data[[i]]<-OLD_DATA_4
DUP_OLD_DATA_4 = do.call(rbind, data)
}


DUP_OLD_DATA_4<-DUP_OLD_DATA_4%>%arrange(year,FS)
DUP_OLD_DATA_4$value<-DUP_OLD_DATA_4$value/12

(DUP_OLD_DATA_4<-separate(DUP_OLD_DATA_4, col=FS, into=c("A","B","C"), sep="_"))



colnames(DUP_OLD_DATA_4)[3]<-"sub_reg"
colnames(DUP_OLD_DATA_4)[4]<-"fishing_tech"
colnames(DUP_OLD_DATA_4)[5]<-"vessel_length"
colnames(DUP_OLD_DATA_4)[7]<-"totseadays"
```


# START FROM HERE 




```{r}
(BIGDF<-rbind(DUP_OLD_DATA_4,DATA_DAY))

```

```{r}

(BIGDFDUP<-BIGDF%>%filter(vessel_length!="VL0612" & fishing_tech!=FT2)) #segment to be duplicated
(BIGDFNODUP_DTS<-BIGDF%>%filter(vessel_length%in%"VL0612" & fishing_tech%in%FT1))#segment ok
(BIGDFNODUP_PGP<-BIGDF%>%filter(fishing_tech%in%FT2 & vessel_length%in%c("VL0012","VL1218")))

(BIGDFDUP_DEF<-BIGDFDUP_DWS<-BIGDFDUP_MDD<-BIGDFDUP)
(BIGDFDUP_DEF$Metier<-"DEF")
(BIGDFDUP_DWS$Metier<-"DWS")
(BIGDFDUP_MDD$Metier<-"MDD")

(BIGDFDUPLICATED<-rbind(BIGDFDUP_DEF,BIGDFDUP_DWS,BIGDFDUP_MDD)) # I duplicate the line of the three vessels lenght for the three metiers
BIGDFNODUP_DTS$Metier<-"DEF"
BIGDFNODUP_DTS$gear<-"OTB"
(BIGDFDUPLICATED$gear<-"OTB")

(BIGDFNODUP_DTS<-BIGDFNODUP_DTS[,c(2,3,4,5,11,10,6,7,8,9)])
(BIGDFDUPLICATED<-BIGDFDUPLICATED[,c(2,3,4,5,11,10,6,7,8,9)])

(BIGDFNODUP_DTS<-BIGDFNODUP_DTS%>%unite("FS",c(sub_reg:Metier), remove = T))
(BIGDFDUPLICATED<-BIGDFDUPLICATED%>%unite("FS",c(sub_reg:Metier), remove = T))
(BIGDFNODUP_PGP<-BIGDFNODUP_PGP[,c(2:9)]%>%unite("FS",c(sub_reg:vessel_length), remove = T))

(FINALDFDAY<-rbind(BIGDFNODUP_DTS,BIGDFDUPLICATED,BIGDFNODUP_PGP))
(FINALDFDAY<-FINALDFDAY%>%arrange(year,FS))

colnames(FINALDFDAY)[1]<-"Year"
colnames(FINALDFDAY)[4]<-"Days"

(FINALDFDAY$Days<-round(as.numeric(FINALDFDAY$Days)))



(FINALDFDAY<-FINALDFDAY%>%filter(!FS%in%c("GSA9_DTS_VL0612_OTB_MDD",
                                          "GSA9_DTS_VL0612_OTB_DWS",
                                          "GSA9_DTS_VL2440_OTB_DWS"))) # in our example we do not used thse LOA and we removed those. IF you wnat all the FS please remove these lines. 




write.table(FINALDFDAY,"D:/Andrea/Desktop/FINALDFDAY_metier.csv",sep=";",row.names=F)      

Fleet_segments<-unique(FINALDFDAY$FS) 

ts<-c(2006:2022)
trans_year=c(2022)

#Days
#(Days_data=read.table("C:/Users/andre/OneDrive/Desktop/COISPA/BEMTOOL/MUT17/input formats/days17_18.csv",sep=";", header=T))

#library(tidyverse)
Days_data<-FINALDFDAY

#(Days_data=Days_data[Days_data$Year %in% ts & Days_data$FS %in% Fleet_segments,])

(DF1=matrix(0,nrow=12,ncol=length(ts)))
(colnames(DF1)=ts)
(rownames(DF1)=seq(1,12,1))

(Days_data_temp=Days_data[Days_data$FS==Fleet_segments[1],])

for (rr in 1:nrow(Days_data_temp)){
  
  year=Days_data_temp$Year[rr] 
  month=Days_data_temp$Month[rr]
  #unit=Days_data_temp$Unit[rr]
  
  if (month!=0){
    DF1[rownames(DF1)==month,colnames(DF1)==year]=Days_data_temp$Days[rr]
  } else if (month==0){
    DF1[,colnames(DF1)==year]=Days_data_temp$Days[rr]
  }  
  
}

(DF1[,colnames(DF1) %in% trans_year]=DF1[,as.numeric(colnames(DF1)) == (trans_year[1]-1)])

for (fs in Fleet_segments[-1]){
  
  print(fs,quote=F)
  DF_next=matrix(0,nrow=12,ncol=length(ts))
  colnames(DF_next)=ts
  rownames(DF_next)=seq(1,12,1)
  
  # Fleet_segments[1]
  Days_data_temp=Days_data[Days_data$FS==fs,]
  
  for (rr in 1:nrow(Days_data_temp)){
    
    year=Days_data_temp$Year[rr] 
    month=Days_data_temp$Month[rr]
    unit=Days_data_temp$Unit[rr]
    
    if (month!=0){
      DF_next[rownames(DF_next)==month,colnames(DF_next)==year]=Days_data_temp$Days[rr]  
      
    } else if (month==0){
      
      DF_next[,colnames(DF_next)==year]=Days_data_temp$Days[rr] 
    }  
    
  }
  
  (DF_next[,colnames(DF_next) %in% trans_year]= DF_next[,as.numeric(colnames(DF_next)) == (trans_year[1]-1)])
  
  DF1=cbind(DF1,DF_next)
  
} # ciclo FS

Days=DF1

#VESSELS

(Vess_data=FINALDF)

(Vess_data=Vess_data[Vess_data$Year %in% ts & Vess_data$FS %in% Fleet_segments,])

(DF1=matrix(0,nrow=12,ncol=length(ts)))
(colnames(DF1)=ts)
(rownames(DF1)=seq(1,12,1))

#Fleet_segments[1]
(Vess_data_temp=Vess_data[Vess_data$FS==Fleet_segments[1],])

for (rr in 1:nrow(Vess_data_temp)){
  
  year=Vess_data_temp$Year[rr] 
  month=Vess_data_temp$Month[rr]
  #unit=Vess_data_temp$Unit[rr]
  
  if (month!=0){
    DF1[rownames(DF1)==month,colnames(DF1)==year]=Vess_data_temp$Vess[rr]
  } else if (month==0){
    DF1[,colnames(DF1)==year]=Vess_data_temp$Vess[rr]
  }  
  
}

(DF1[,colnames(DF1) %in% trans_year]= DF1[,as.numeric(colnames(DF1)) == (trans_year[1]-1)])

for (fs in Fleet_segments[-1]){
  
  print(fs,quote=F)
  DF_next=matrix(0,nrow=12,ncol=length(ts))
  colnames(DF_next)=ts
  rownames(DF_next)=seq(1,12,1)
  
  # Fleet_segments[1]
  Vess_data_temp=Vess_data[Vess_data$FS==fs,]
  
  for (rr in 1:nrow(Vess_data_temp)){
    
    year=Vess_data_temp$Year[rr] 
    month=Vess_data_temp$Month[rr]
    unit=Vess_data_temp$Unit[rr]
    
    if (month!=0){
      DF_next[rownames(DF_next)==month,colnames(DF_next)==year]=Vess_data_temp$Vess[rr]  
      
    } else if (month==0){
      
      DF_next[,colnames(DF_next)==year]=Vess_data_temp$Vess[rr]  
    }  
    
  }
  DF_next[,colnames(DF_next) %in% trans_year]= DF_next[,as.numeric(colnames(DF_next)) == (trans_year[1]-1)]
  
  DF1=cbind(DF1,DF_next)
  
} # ciclo FS

(Vess=DF1)

for (f in 1:length(Fleet_segments)){
  ini=1+(f-1)*length(ts)
  fin=(f)*length(ts)
  Vess[which(Days==0)][ini:fin] = mean(Vess[,ini:fin],na.rm=T )  
}

(Avg_days=round(Days/Vess))

#FirstRow=t(data.frame(rep(ts,length(Fleet_segments))))
#FirstRow=c("Units: kg",FirstRow)

(SecondRow=t(data.frame(rep(Fleet_segments[1],length(ts)))  ))

for (fs in Fleet_segments[-1]){
  print(fs)
  SecondRow2=t(data.frame(rep(fs,length(ts))))
  
  SecondRow=cbind(SecondRow,SecondRow2) 
  
}

(empty_row=t(data.frame(rep("",length(SecondRow)))))

(DF_final=(rbind(SecondRow,empty_row,empty_row)))

(DF_final=rbind(DF_final,as.matrix(Avg_days)))

DF_final= cbind(c(     "casestudy.fleetsegmentcode",
                       "casestudy.fishingtechnique",
                       "casestudy.loa",
                       "casestudy.month1",
                       "casestudy.month2",
                       "casestudy.month3",
                       "casestudy.month4",
                       "casestudy.month5",
                       "casestudy.month6",
                       "casestudy.month7",
                       "casestudy.month8",
                       "casestudy.month9",
                       "casestudy.month10",
                       "casestudy.month11",
                       "casestudy.month12"
),DF_final)


colnames(DF_final)[1]="Units: days"
# Please add your directories and save your file as .csv
write.table(DF_final,"D:/Andrea/Desktop/TEST_DAYS_METIER.csv",sep=";",row.names=F) 
# if there are some NaN in your final csv file it could be caused by 0 values in you vessel file "FINALDF" with actual days in your Table G.csv

```
