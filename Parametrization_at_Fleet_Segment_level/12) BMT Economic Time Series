---
title: "12) BEMTool Economic Time Series"
author: "Andrea Pierucci and Isabella Bitetto"
date: '2022-03-25'
output:
  #bookdown::pdf_book:
  pdf_document: default
  #html_document: default
header-includes:
    - \usepackage{ragged2e}
    - \usepackage{multirow}
    - \usepackage{setspace}\doublespacing
---

```{r}
# packages needed 

library(tidyverse)
library(data.table)
library(readxl)

# We use the official STECF data, we use this data are from 2008 to 2013 
dir<-"D:/Andrea/Desktop/NEW_BEMTool/STECF_21-08_EU_Fleet_Economic_and_Transversal_data_fleet_segment.xlsx" 
(dataXX<-read_xlsx(dir, sheet = 2))

# Maxseadays follows National rools and are equal in all GSAs. So we do not need to have this data at a GSA level of detail. 
# NB In the lines below we show how to extract and manipulate data for calculating the following variables:

#  1) The Maxseadays
#  2) Total_landings + total revenues ALL species-
#  3) Total revenue ALL species
#  4) Total_landings ALL species
#  5) S1 data preparation (Landings + Revenues)
#  6) Total Revenue S1
#  7) Total landings S1
#  8) fuelcosts 
#  9) labour_costs
# 10) othervariablecosts
# 11) totalvariablecosts
# 12) revenues.discards.S1
# 13) commercialcosts
# 14) essentialcosts
# 15) avoidablemaintenancecosts
# 16) unavoidablemaintenancecosts
# 17) otherincome
# 18) depreciationcosts
# 19) other fixed costs
# 20) maintenance costs
# 21) Capital value
# 22) opportunity costs
# 23) employement
# 24) total fixed costs
# 25) totalcapitalcosts


#--------------------------------------------1)-Maxseadays-----------------------------------------------------------
maxseadays<-dataXX

# First we need to check if the all time series is complete. If some years are missing you may copy the first available year. 
# NB All the data needs the same amount of years in BMT. 
# In this case we have the two first year (2206 and 2007) missing so we copy both from the first available year (2008).
CC<-"ITA"

(maxseadays<-maxseadays%>%
    filter(country_code%in%CC & variable_code%in%"maxseadays" & supra_reg%in%"AREA37"))

(maxseadays2008<-maxseadays%>%filter(year%in%"2008"))
(maxseadays2006<-maxseadays2007<-maxseadays2008)
(maxseadays2006$year<-"2006")
(maxseadays2007$year<-"2007")
(maxseadays<-rbind(maxseadays2006,maxseadays2007,maxseadays))

# NMext you may select the LOA you are working with 

FT1<-"DTS"
LOA1<-c("VL0612","VL1218","VL1824","VL2440")

(maxseadays2<-maxseadays%>%
    filter(fishing_tech%in%FT1 & vessel_length%in%LOA1 & year%in%c("2006":"2013")))

maxseadays2$GSA<-GSA
maxseadays2$OTB<-"OTB"
(maxseadays3<-maxseadays2[,c(19,6,7,20,4,14,15)])
(maxseadays4<-maxseadays3%>%unite("FS",c(GSA:OTB), remove = T))

# Here we grouped some PGP LOA as we did in previous steps
# This aggregation is arbitrary 

FT2<-"PGP"
LOA1<-c("VL0006","VL0612")

(maxseadaysPGP1<-maxseadays%>%
    select(country_code,year,supra_reg,fishing_tech,vessel_length,value,unit)%>%
    filter(fishing_tech%in%FT2& supra_reg%in%"AREA37"& vessel_length%in%"VL1218"))
(maxseadaysPGP2<-maxseadays%>%
    select(country_code,year,supra_reg,fishing_tech,vessel_length,value,unit)%>%
    filter(fishing_tech%in%FT2& supra_reg%in%"AREA37"& vessel_length%in%LOA2)%>%
    group_by(country_code,year,supra_reg,fishing_tech,unit)%>%
    summarise(value=sum(value)))
(maxseadaysPGP2$vessel_length<-"VL0012")
(maxseadaysPGP3<-rbind(maxseadaysPGP2,maxseadaysPGP1))

# Aslo in this case the final lable of each segment shall be equal to all the previous one data elaboration
# At this point you may add the "GSA" lable you need. 

maxseadaysPGP3$gSA<-GSA
(maxseadaysPGP3<-maxseadaysPGP3[,c(8,4,7,2,6,5)])
(maxseadaysPGP4<-maxseadaysPGP3%>%unite("FS",c(gSA:vessel_length), remove = T))
(maxseadays4<-rbind(maxseadays4,maxseadaysPGP4))
(maxseadaysDF<-maxseadays4%>%arrange(year,FS))

# Next you may move on to the most recent data (from 2014 to 2020).
# We use the FDI offcial dataset.

(RECENTDATA2<-read.csv("D:/Andrea/Desktop/NEW_BEMTool/FDI_capacity_by_country.csv", sep = ";"))

# Please select you GSAs
COUNTRY<-"Italy"
GSA<-"GSA9"

(RECENTDATA2<-RECENTDATA2%>%filter(Country.name%in%COUNTRY &  principal.sub.region%in%GSA))
(RECENTDATA3<-RECENTDATA2%>%
    filter(Country.name%in%COUNTRY & Fishing.Technique%in%FT1 & Vessel.Length.Category%in%LOA1))

# Please add OTB just for a lable purpose ( consistency with all the other lables used in the previous scripts ). 
RECENTDATA3$OTB<-"OTB"

(RECENTDATA3<-RECENTDATA3%>%
    select(principal.sub.region,Fishing.Technique,Vessel.Length.Category,OTB,year,maximum.sea.days)%>%
    arrange(year,Vessel.Length.Category))

(RECENTDATAOTB<-RECENTDATA3%>%unite("FS",c(principal.sub.region:OTB), remove = T))

# Now we may organize the PGP data.

LOA2<-c("VL0006","VL0612")

(RECENTDATAPGP2<-RECENTDATA2%>%
    filter(Country.name%in%COUNTRY & Fishing.Technique%in%FT2 & Vessel.Length.Category%in%"VL1218")%>%
    select(principal.sub.region,Fishing.Technique,Vessel.Length.Category,year,maximum.sea.days))
RECENTDATAPGP2$maximum.sea.days<-as.numeric(RECENTDATAPGP2$maximum.sea.days)

(RECENTDATAPGP1<-RECENTDATA2%>%
    filter(Country.name%in%COUNTRY & Fishing.Technique%in%FT2 & Vessel.Length.Category%in%LOA2))
RECENTDATAPGP1$maximum.sea.days <-as.numeric(RECENTDATAPGP1$maximum.sea.days)

(RECENTDATAPGP1<-RECENTDATAPGP1%>%
    select(principal.sub.region,year,Fishing.Technique,maximum.sea.days)%>%
    group_by(principal.sub.region,year,Fishing.Technique)%>%
    summarise(maximum.sea.days=sum(as.numeric(maximum.sea.days))))
RECENTDATAPGP1$Vessel.Length.Category<-"VL0012"

RECENTDATAPGP<-rbind(RECENTDATAPGP1,RECENTDATAPGP2)
(RECENTDATAPGP<-RECENTDATAPGP[,c(1,3,5,2,4)])
(RECENTDATAPGP<-RECENTDATAPGP%>%unite("FS",c(principal.sub.region:Vessel.Length.Category), remove = T))
RECENTDATAFD<-rbind(RECENTDATAOTB,RECENTDATAPGP)
RECENTDATAFD%>%arrange(year,FS)

# All DF from 2006-2020 completed (we add the old and the new data) 
maxseadaysDF<-maxseadaysDF[,c(1,2,3)]
colnames(RECENTDATAFD)[3]<-"value"
(ALLDATAFD<-rbind( maxseadaysDF,  RECENTDATAFD))
(ALLDATAFD<-ALLDATAFD%>%arrange(year,FS))

#-----------------------------2)-Total_landings + total revenues ALL species---------------------------------------------------------

# I first prepare the data set for the new data 2014-2020 for both landings and revenues. 
# Next I need to prepare the recent data 2008-2013 of REVENUE and when these are ready I rbind the two revenues data set (2008-2013 + 2014-2020)
# Next, I prepare the recent data 2008-2013 of LANDINGS and when these are ready I rbind the two landings data set (2008-2013 + 2014-2020) in a same way

# These are the packages needed. 

library(tidyverse)
library(data.table)
library(readxl)

# Add your directory and use only official data if possible such as FDI or others. 
dir<-"D:/Andrea/Desktop/NEW_BEMTool/FDI_catches_by_country.xlsx"

(Y2020<-read_xlsx(dir, sheet = 2))
(Y2019<-read_xlsx(dir, sheet = 3))
(Y2018<-read_xlsx(dir, sheet = 4))
(Y2017<-read_xlsx(dir, sheet = 5))
(Y2016<-read_xlsx(dir, sheet = 6))
(Y2015<-read_xlsx(dir, sheet = 7))
(Y2014<-read_xlsx(dir, sheet = 8))

catch<-rbind(Y2020,Y2019,Y2018,Y2017,Y2016,Y2015,Y2014)

rm(Y2020,Y2019,Y2018,Y2017,Y2016,Y2015,Y2014)

# If you use the FDI data, please change some labels, it will be easier to work with other data STECF data frame at the same time. 

names(catch)[1]<-"country_code"
names(catch)[14]<-"sub_region"
names(catch)[6]<-"fishing_technique"
names(catch)[2]<-"country_name"
names(catch)[5]<-"vessel_length"
names(catch)[8]<-"Target_Assemblage" 
names(catch)[21]<-"total_live_weight_landed_tonnes"
names(catch)[22]<-"total_value_of_landings_euro"
names(catch)[23]<-"total_discards"
names(catch)[7]<- "gear_type"

# After you could select your country, GSA and species

# Here the data extraction for data from 2020 to 2014
# We use the MUT in GSA 9 as example. 
# Please add your single or multiple GSAs and Species

# NB for the DTS there are no problem in GSA 9 for Italy and data are available from 2020 to 2014 however in the same area for PGP we found data available from 2016 to 2014 only 
# Please check your data 

COUNTRY<-"Italy"
GSA<-"GSA9"

(DTS<-catch%>%
    select(country_name,year,vessel_length,fishing_technique,gear_type,sub_region,species,total_live_weight_landed_tonnes,total_value_of_landings_euro)%>%
    filter(country_name%in%COUNTRY & sub_region%in%GSA & fishing_technique%in%FT1& gear_type%in%"OTB"))

# PGP data from 2016 to 2014 

(PGP<-catch%>%
    select(country_name,year,vessel_length,fishing_technique,gear_type,sub_region,species,total_live_weight_landed_tonnes,total_value_of_landings_euro)%>%
    filter(country_name%in%COUNTRY & sub_region%in%GSA & fishing_technique%in%FT2))
# Please check if there are all fleet segments in all the year or if there are some missing data

(PGP<-PGP%>%
    select(year,vessel_length,sub_region,species,total_live_weight_landed_tonnes,gear_type,fishing_technique,total_value_of_landings_euro)%>%
    group_by(year,vessel_length,sub_region,species,gear_type,fishing_technique)%>%
    summarise(total_live_weight_landed_tonnes=sum(as.numeric(total_live_weight_landed_tonnes)),
              total_value_of_landings_euro=sum(as.numeric(total_value_of_landings_euro))))

(PGP<-PGP[,c(3,6,2,1,4,7,8)])

(PGP1<-PGP%>%
    filter(vessel_length%in%LOA2)%>%
    group_by(sub_region,fishing_technique,year,species)%>%
    summarise(total_live_weight_landed_tonnes=sum(as.numeric(total_live_weight_landed_tonnes)),
              total_value_of_landings_euro=sum(as.numeric(total_value_of_landings_euro))))
(PGP1$vessel_length<-"VL0012")
(PGP1<-PGP1[,c(1,2,7,3,4,5,6)])

(PGP2<-PGP%>%
    filter(vessel_length%in%"VL1218")%>%
    group_by(sub_region,fishing_technique,vessel_length,year,species)%>%
    summarise(total_live_weight_landed_tonnes=sum(as.numeric(total_live_weight_landed_tonnes)),
              total_value_of_landings_euro=sum(as.numeric(total_value_of_landings_euro))))

(PGP3<-rbind(PGP1,PGP2))
(PGP4<-PGP3%>%unite("FS",c(sub_region:vessel_length), remove = T))

# cleaned and conversion data from tons to KG
(DTS$total_live_weight_landed_tonnes[DTS$total_live_weight_landed_tonnes=="NK"] <- 0.000001)
(DTS$total_live_weight_landed_tonnes<-as.numeric(DTS$total_live_weight_landed_tonnes))
(DTS$total_live_weight_landed_tonnes<-DTS$total_live_weight_landed_tonnes*1000 )# here I convert tons to kg (BEMTool needs kg)

(PGP$total_live_weight_landed_tonnes[PGP$total_live_weight_landed_tonnes=="NK"] <- 0.000001)
(PGP$total_live_weight_landed_tonnes<-as.numeric(PGP$total_live_weight_landed_tonnes))
(PGP$total_live_weight_landed_tonnes<-PGP$total_live_weight_landed_tonnes*1000 )# here I convert tons to kg (BEMTool needs kg)

(DTS<-DTS%>%
    select(year,vessel_length,sub_region,fishing_technique,species,total_live_weight_landed_tonnes,gear_type,total_value_of_landings_euro)%>%
    group_by(year,vessel_length,sub_region,fishing_technique,species,gear_type)%>%
    summarise(total_live_weight_landed_tonnes=sum(as.numeric(total_live_weight_landed_tonnes)),
              total_value_of_landings_euro=sum(as.numeric(total_value_of_landings_euro))))

(DTS<-DTS[,c(3,4,2,6,1,5,7,8)])
(DTSFUL<-DTS%>%unite("FS",c(sub_region:gear_type), remove = T))

(FULLDF<-rbind(DTSFUL,PGP4))
(FULLDF_totland_totrev<-FULLDF %>%
    group_by(FS,year)%>%
    summarise(total_live_weight_landed_tonnes=sum(as.numeric(total_live_weight_landed_tonnes)),
              total_value_of_landings_euro=sum(as.numeric(total_value_of_landings_euro))))

(FULLDF_totland_totrev<-FULLDF_totland_totrev%>%arrange(year,FS))

# Please check if there are all the fleet segments you need for all the years and if there are some missing data.
# Below is the extraction of the older data 2008-2016
# now you need to load your data, we used STECF official data 
dir<-"D:/Andrea/Desktop/NEW_BEMTool/STECF_21-08_EU_Fleet_Economic_and_Transversal_data_fleet_segment.xlsx" #this for data from 2008 to 2013
(dataYY2008_2011<-read_xlsx(dir, sheet = 9))
(dataYY2012_2016<-read_xlsx(dir, sheet = 8))

#(dataYY2008_2011<-read.csv("D:/Andrea/Desktop/NEW_BEMTool/STECF_21-08_EU_Fleet_Economic_and_Transversal_data_fleet_segment_1.csv", sep=",", header=T))
#(dataYY2012_2016<-read.csv("D:/Andrea/Desktop/NEW_BEMTool/STECF_21-08_EU_Fleet_Economic_and_Transversal_data_fleet_segment_2.csv", sep=",", header=T)) 

# Now you need to prepare the two data set 
(dataYY2008_2011<-dataYY2008_2011%>%select(country_code,year,supra_reg,fishing_tech,vessel_length,variable_code,value,unit,species_code,sub_reg))
(dataYY2012_2016<-dataYY2012_2016%>%select(country_code,year,supra_reg,fishing_tech,vessel_length,variable_code,value,unit,species_code,sub_reg))
data<-rbind(dataYY2008_2011,dataYY2012_2016)

LOA1<-c("VL0612","VL1218","VL1824","VL2440")

(dataDTS<-data%>%
    filter(country_code%in%CC & year%in%c(2008:2013) & supra_reg%in%"AREA37" & fishing_tech%in%FT1 & sub_reg%in%"sa 9"& vessel_length%in%LOA1))


LO2<-c("VL0006","VL0612","VL1218")

(dataDTS_PGP<-data%>%
    filter(country_code%in%CC & year%in%c(2008:2013) & supra_reg%in%"AREA37"& fishing_tech%in%FT2& sub_reg%in%"sa 9"& vessel_length%in%LOA2))

(DATA_STECF<-rbind(dataDTS,dataDTS_PGP))

# for consistency I shell remove all the species present in STECF data frame that are not present in FDI data frame
# some check are always better:
# length(unique(DATA_FDI$species))
# length(unique(DATA_STECF$species_code))

(spec<-unique(FULLDF$species))

# below the total landing and total revenue by GSAs and by LOA
(DATA_STECF_2<-DATA_STECF%>%
    filter(species_code%in%spec)%>%
    group_by(sub_reg,country_code,year,fishing_tech,vessel_length,variable_code,unit)%>%
    summarise(value=sum(as.numeric(value))))

# ----------------------------3)-Total revenue------------

# For the total revenue I start with the old data 2008-2013 of revenue
(DATA_STECF_2_totrevenue<-DATA_STECF_2%>%filter(variable_code%in%"totvallandg"))
colnames(DATA_STECF_2_totrevenue)[8]<-"totrevenue"
(DATA_STECF_2_totrevenue<-DATA_STECF_2_totrevenue[,c(1,2,3,4,5,8)])

# Below the I filter data by LOA
# I start with the DTS data

(DATA_STECF_2_totrevenueDTS<-DATA_STECF_2_totrevenue%>%filter(fishing_tech%in%FT1))
(DATA_STECF_2_totrevenueDTS$OTB<-"OTB")
(FULLDF_FINAL_FINAL<-DATA_STECF_2_totrevenueDTS%>%arrange(year,vessel_length))

# Please, check if there are some LOA in some Years missing 

(FULLDF_FINAL_FINAL_2008_2440<-FULLDF_FINAL_FINAL%>%filter(vessel_length%in%"VL2440",year%in%"2009"))
FULLDF_FINAL_FINAL_2008_2440$year<-2008
(FULLDF_FINAL_FINAL<-rbind(FULLDF_FINAL_FINAL_2008_2440,FULLDF_FINAL_FINAL))
FULLDF_FINAL_FINAL$sub_reg<-GSA
(FULLDF_FINAL_FINAL<-FULLDF_FINAL_FINAL[,c(1,4,5,7,3,6)])
(FULLDF_FINAL_FINAL<-FULLDF_FINAL_FINAL%>%unite("FS",c(sub_reg:OTB), remove = T))
(FULLDF_FINAL_FINAL<-FULLDF_FINAL_FINAL%>%arrange(year,FS))

# Now it is time of the PGP and some aggregations. # aggregation are totally arbitrary 

DATA_STECF_2_totrevenuePGP<-DATA_STECF_2_totrevenue%>%
  filter(fishing_tech%in%FT2)
(DATA_STECF_2_totrevenuePGP_NOTDUP<-DATA_STECF_2_totrevenuePGP%>%
    filter(vessel_length%in%c("VL0612","VL0006"))%>%
    group_by(sub_reg,country_code,fishing_tech,year)%>%
    summarise(totrevenue=sum(as.numeric(totrevenue))))
(DATA_STECF_2_totrevenuePGP_NOTDUP$vessel_length<-"VL0012")
(DATA_STECF_2_totrevenuePGP_NOTDUP_2<-DATA_STECF_2_totrevenuePGP%>%filter(vessel_length%in%"VL1218"))
(DATA_STECF_2_totrevenuePGP<-rbind(DATA_STECF_2_totrevenuePGP_NOTDUP,DATA_STECF_2_totrevenuePGP_NOTDUP_2))
DATA_STECF_2_totrevenuePGP$sub_reg<-GSA
(DATA_STECF_2_totrevenuePGP<-DATA_STECF_2_totrevenuePGP[,c(1,3,6,4,5)])
(DATA_STECF_2_totrevenuePGP<-DATA_STECF_2_totrevenuePGP%>%unite("FS",c(sub_reg:vessel_length), remove = T))
(FINALOLDDF<-rbind( FULLDF_FINAL_FINAL,DATA_STECF_2_totrevenuePGP))
(FINALOLDDF%>%arrange(year,FS))

# Please, check if there are some missing.

(REVENUE<-FULLDF_totland_totrev[,c(1,2,4)])
colnames(REVENUE)[3]<-"REV_EURO" 
colnames(FINALOLDDF)[3]<-"REV_EURO"

(REV_TOTAL_DF<-rbind(FINALOLDDF,REVENUE)) 
(REV_TOTAL_DF_ALLSPEC<-REV_TOTAL_DF%>%arrange(year,FS))

# This part is now ready for the file time series

# -------------------------4)-Total landings------------------------ 

(DATA_STECF_2_totlandings<-DATA_STECF_2%>%filter(variable_code%in%"totwghtlandg"))
colnames(DATA_STECF_2_totlandings)[8]<-"totlandings"
(DATA_STECF_2_totlandings<-DATA_STECF_2_totlandings[,c(1,2,3,4,5,8)])

# I start with the DTS first

(DATA_STECF_2_totlandingsDTS<-DATA_STECF_2_totlandings%>%filter(fishing_tech%in%FT1))
(DATA_STECF_2_totlandingsDTS_2440_2008<-DATA_STECF_2_totlandingsDTS%>%filter(vessel_length%in%"VL2440" & year%in%2009))
(DATA_STECF_2_totlandingsDTS_2440_2008$year<-2008)

(DATA_STECF_2_totlandingsDTS<-rbind(DATA_STECF_2_totlandingsDTS_2440_2008,DATA_STECF_2_totlandingsDTS))
DATA_STECF_2_totlandingsDTS$sub_reg<-GSA
DATA_STECF_2_totlandingsDTS$OTB<-"OTB"

(FULLDF_FINALX<-DATA_STECF_2_totlandingsDTS[,c(1,4,5,7,3,6)])
(FULLDF_FINALX<-FULLDF_FINALX%>%unite("FS",c(sub_reg:OTB), remove = T))
(FULLDF_FINALX<-FULLDF_FINALX%>%arrange(year,FS))

# Now it is time of PGP with some LOA aggregation

DATA_STECF_2_totlandingsPGP<-DATA_STECF_2_totlandings%>%filter(fishing_tech%in%FT2)
(DATA_STECF_2_totlandingsPGPP_NOTDUP<-DATA_STECF_2_totlandingsPGP%>%
    filter(vessel_length%in%c("VL0612","VL0006"))%>%
    group_by(sub_reg,country_code,fishing_tech,year)%>%
    summarise(totlandings=sum(as.numeric(totlandings))))

(DATA_STECF_2_totlandingsPGPP_NOTDUP$vessel_length<-"VL0012")
(DATA_STECF_2_totlandingsPGP_NOTDUP_2<-DATA_STECF_2_totlandingsPGP%>%filter(vessel_length%in%"VL1218"))
(DATA_STECF_2_totlandingsPGP<-rbind(DATA_STECF_2_totlandingsPGPP_NOTDUP,DATA_STECF_2_totlandingsPGP_NOTDUP_2))

DATA_STECF_2_totlandingsPGP$sub_reg<-GSA
(DATA_STECF_2_totlandingsPGP<-DATA_STECF_2_totlandingsPGP[,c(1,3,6,4,5)])
(DATA_STECF_2_totlandingsPGP<-DATA_STECF_2_totlandingsPGP%>%unite("FS",c(sub_reg:vessel_length), remove = T))
(FINALOLDDFX<-rbind( FULLDF_FINALX,DATA_STECF_2_totlandingsPGP))
(FINALOLDDFX%>%arrange(year,FS)) # this is the file ready for the old data for landings

# At this time you could sum old plus new data frame

(LAND<-FULLDF_totland_totrev[,c(1,2,3)])
colnames(LAND)[3]<-"Landing_Kg"
colnames(FINALOLDDFX)[3]<-"Landing_Kg"

# The final step is to sum up old landings with the new DF data 

(LAND_TOTAL_DF_ALLSPEC<-rbind(FINALOLDDFX,LAND)) 
LAND_TOTAL_DF_ALLSPEC$variable_name<-"totallandings" 
colnames(LAND_TOTAL_DF_ALLSPEC)[3]<-"value"
# This final DF is ready for the file time series

# I repeat all the steps below for each single species I need 
# As example I present just one species (s1) data extraction. 
# The process should be run for all the species you need. 

#---------------------------------------5) S1 reparation (Landings Revenues) -----------------------------------------------
# Here the data extraction for data from 2020 to 2014 for a single specie an example of species here is the "MUT GSA 9 "
# NB for the DTS there are no missing data in GSA 9 for Italy and data are available from 2020 to 2014 however in the same area for PGP we found data from 2016 to 2014 only. 
# Please check your data properly. 

(DTS<-catch%>%
   select(country_name,year,vessel_length,fishing_technique,gear_type,sub_region,species,total_live_weight_landed_tonnes,total_value_of_landings_euro)%>%
   filter(country_name%in%COUNTRY & sub_region%in%GSA & fishing_technique%in%FT1 & gear_type%in%"OTB" & species%in%SP ))

# Below the PGP data from 2016 to 2014 

(PGP<-catch%>%
    select(country_name,year,vessel_length,fishing_technique,gear_type,sub_region,species,total_live_weight_landed_tonnes,total_value_of_landings_euro)%>%
    filter(country_name%in%COUNTRY & sub_region%in%GSA & fishing_technique%in%FT2 & species%in%SP ))

(PGP<-PGP%>%
    select(year,vessel_length,sub_region,species,total_live_weight_landed_tonnes,gear_type,fishing_technique,total_value_of_landings_euro)%>%
    group_by(year,vessel_length,sub_region,species,gear_type,fishing_technique)%>%
    summarise(total_live_weight_landed_tonnes=sum(as.numeric(total_live_weight_landed_tonnes)),
              total_value_of_landings_euro=sum(as.numeric(total_value_of_landings_euro))))

(PGP<-PGP[,c(3,6,2,1,4,7,8)])

(PGP1<-PGP%>%
    filter(vessel_length%in%LOA2)%>%
    group_by(sub_region,fishing_technique,year,species)%>%
    summarise(total_live_weight_landed_tonnes=sum(as.numeric(total_live_weight_landed_tonnes)),
              total_value_of_landings_euro=sum(as.numeric(total_value_of_landings_euro))))
(PGP1$vessel_length<-"VL0012")
(PGP1<-PGP1[,c(1,2,7,3,4,5,6)])

(PGP2<-PGP%>%
    filter(vessel_length%in%("VL1218"))%>%
    group_by(sub_region,fishing_technique,vessel_length,year,species)%>%
    summarise(total_live_weight_landed_tonnes=sum(as.numeric(total_live_weight_landed_tonnes)),
              total_value_of_landings_euro=sum(as.numeric(total_value_of_landings_euro))))

(PGP3<-rbind(PGP1,PGP2))
(PGP4<-PGP3%>%unite("FS",c(sub_region:vessel_length), remove = T))

# Now you need to clean and convert the data from tons to KG

(DTS$total_live_weight_landed_tonnes[DTS$total_live_weight_landed_tonnes=="NK"] <- 0.000001)
(DTS$total_live_weight_landed_tonnes<-as.numeric(DTS$total_live_weight_landed_tonnes))
(DTS$total_live_weight_landed_tonnes<-DTS$total_live_weight_landed_tonnes*1000 )# here I convert tons to kg (BEMTool needs kg)

(PGP$total_live_weight_landed_tonnes[PGP$total_live_weight_landed_tonnes=="NK"] <- 0.000001)
(PGP$total_live_weight_landed_tonnes<-as.numeric(PGP$total_live_weight_landed_tonnes))
(PGP$total_live_weight_landed_tonnes<-PGP$total_live_weight_landed_tonnes*1000 )# here I convert tons to kg (BEMTool needs kg)

(DTS<-DTS%>%
    select(year,vessel_length,sub_region,fishing_technique,species,total_live_weight_landed_tonnes,gear_type,total_value_of_landings_euro)%>%
    group_by(year,vessel_length,sub_region,fishing_technique,species,gear_type)%>%
    summarise(total_live_weight_landed_tonnes=sum(as.numeric(total_live_weight_landed_tonnes)),
              total_value_of_landings_euro=sum(as.numeric(total_value_of_landings_euro))))

(DTS<-DTS[,c(3,4,2,6,1,5,7,8)])
(DTSFUL<-DTS%>%unite("FS",c(sub_region:gear_type), remove = T))
(FULLDF<-rbind(DTSFUL,PGP4))
(FULLDF_totland_totrev<-FULLDF %>%
    group_by(FS,year)%>%
    summarise(total_live_weight_landed_tonnes=sum(as.numeric(total_live_weight_landed_tonnes)),
              total_value_of_landings_euro=sum(as.numeric(total_value_of_landings_euro))))

(FULLDF_totland_totrev<-FULLDF_totland_totrev%>%arrange(year,FS))# THIS IS Ready the DF of RECENT DATA

# Please check if there is some missing data or fleet segments.

# After a check we notice in our data some missing in 2015. 

(FULLDF_totland_totrevmissX<-FULLDF_totland_totrev%>%filter(year%in%2016 & FS%in%"GSA9_PGP_VL1218"))
(FULLDF_totland_totrevmissX$year<-2015)
(FULLDF_totland_totrev<-rbind(FULLDF_totland_totrevmissX,FULLDF_totland_totrev))

# Below the data extraction from 2006 to 2013
# Please add you directory 
dir<-"C:/Users/andre/OneDrive/Desktop/COISPA/BEMTOOL/Last_scripts/STECF_21-08_EU_Fleet_Economic_and_Transversal_data_fleet_segment.xlsx" #this for data from 2008 to 2013 

(dataYY2008_2011<-read_xlsx(dir, sheet = 9))
(dataYY2008_2011<-read_xlsx(dir, sheet = 10))
# Please, prepare the two data set needed.

SP<-"MUT"

(dataYY2008_2011<-dataYY2008_2011%>%select(country_code,year,supra_reg,fishing_tech,vessel_length,variable_code,value,unit,species_code,sub_reg))
(dataYY2012_2016<-dataYY2012_2016%>%select(country_code,year,supra_reg,fishing_tech,vessel_length,variable_code,value,unit,species_code,sub_reg))
(data<-rbind(dataYY2008_2011,dataYY2012_2016))

(dataDTS<-data%>%
    filter(country_code%in%CC & year%in%c(2008:2013) & supra_reg%in%"AREA37" & fishing_tech%in%FT1 & sub_reg%in%"sa 9"& vessel_length%in%LOA1 & species_code%in%SP))

(dataDTS_PGP<-data%>%
    filter(country_code%in%CC & year%in%c(2008:2013) & supra_reg%in%"AREA37"& fishing_tech%in%FT2& sub_reg%in%"sa 9"& vessel_length%in%LOA2 & species_code%in%SP))

(DATA_STECF<-rbind(dataDTS,dataDTS_PGP))

# NB, for consistency I shell remove all the species present in STECF data frame that are not present in FDI data frame
# some check :
# length(unique(DATA_FDI$species))
# length(unique(DATA_STECF$species_code))

(spec<-"MUT")

# Below we report the total landing and total revenue by gsa and by LOA

(DATA_STECF_2<-DATA_STECF%>%
    filter(species_code%in%spec)%>%
    group_by(sub_reg,country_code,year,fishing_tech,vessel_length,variable_code,unit)%>%
    summarise(value=sum(as.numeric(value))))

#----------------------------------------6) Total revenue S1 --------------------------------------

(DATA_STECF_2_totrevenue<-DATA_STECF_2%>%filter(variable_code%in%"totvallandg"))
colnames(DATA_STECF_2_totrevenue)[8]<-"totrevenue"
(DATA_STECF_2_totrevenue<-DATA_STECF_2_totrevenue[,c(1,2,3,4,5,8)])

###  DTS first
(DATA_STECF_2_totrevenueDTS<-DATA_STECF_2_totrevenue%>%filter(fishing_tech%in%FT1))

DATA_STECF_2_totrevenueDTS$OTB<-"OTB"
DATA_STECF_2_totrevenueDTS$sub_reg<-GSA

(DATA_STECF_2_totrevenueDTS_2008_2440<-DATA_STECF_2_totrevenueDTS%>%filter(year%in%2009 & vessel_length%in%"VL2440"))
(DATA_STECF_2_totrevenueDTS_2008_2440$year<-2008)
(DATA_STECF_2_totrevenueDTS<-rbind(DATA_STECF_2_totrevenueDTS_2008_2440,DATA_STECF_2_totrevenueDTS))

(FULLDF_FINALXX<-DATA_STECF_2_totrevenueDTS[,c(1,4,5,7,3,6)])
(FULLDF_FINALXX<-FULLDF_FINALXX%>%unite("FS",c(sub_reg:OTB), remove = T))
(FULLDF_FINALXX<-FULLDF_FINALXX%>%arrange(year,FS))

### PGP after 

DATA_STECF_2_totrevenuePGP<-DATA_STECF_2_totrevenue%>%filter(fishing_tech%in%FT2)
(DATA_STECF_2_totrevenuePGP_NOTDUP<-DATA_STECF_2_totrevenuePGP%>%
    filter(vessel_length%in%c("VL0612","VL0006"))%>%
    group_by(sub_reg,country_code,fishing_tech,year)%>%
    summarise(totrevenue=sum(as.numeric(totrevenue))))

(DATA_STECF_2_totrevenuePGP_NOTDUP$vessel_length<-"VL0012")
(DATA_STECF_2_totrevenuePGP_NOTDUP_2<-DATA_STECF_2_totrevenuePGP%>%filter(vessel_length%in%"VL1218"))
(DATA_STECF_2_totrevenuePGP<-rbind(DATA_STECF_2_totrevenuePGP_NOTDUP,DATA_STECF_2_totrevenuePGP_NOTDUP_2))
DATA_STECF_2_totrevenuePGP$sub_reg<-GSA
(DATA_STECF_2_totrevenuePGP<-DATA_STECF_2_totrevenuePGP[,c(1,3,6,4,5)])
(DATA_STECF_2_totrevenuePGP<-DATA_STECF_2_totrevenuePGP%>%unite("FS",c(sub_reg:vessel_length), remove = T))

# Below the DTS + PGP old file (2008-2013)
(FINALOLDDF<-rbind( FULLDF_FINALXX,DATA_STECF_2_totrevenuePGP))
(FINALOLDDF<-FINALOLDDF%>%arrange(year,FS)) #check if there are some missing data in some year 

# Please check for missing data.
# In our example there are PGP that is missing in 2013 

(FINALOLDDF_2013<-FINALOLDDF%>%filter(year%in%2012 & FS%in%"GSA9_PGP_VL1218"))
FINALOLDDF_2013$year<-2013
(FINALOLDDF<-rbind(FINALOLDDF,FINALOLDDF_2013)) # the pgp of 2013 are missing so I duplicated the 2012 data

(REV<-FULLDF_totland_totrev[,c(1,2,4)])
colnames(REV)[3]<-"REV_EURO"
colnames(FINALOLDDF)[3]<-"REV_EURO"
(REVTOTAL_DF<-rbind(FINALOLDDF,REV)) 
(REV_TOTAL_DF_MUT<-REV_TOTAL_DF%>%arrange(year,FS))
# Now this is ready for the file time series

#---------------------------------------7)-Total Landings S1 -------------------------------------------------------
(DATA_STECF_2_totlandings<-DATA_STECF_2%>%filter(variable_code%in%"totwghtlandg"))
colnames(DATA_STECF_2_totlandings)[8]<-"totlandings"
(DATA_STECF_2_totlandings<-DATA_STECF_2_totlandings[,c(1,2,3,4,5,8)])

###  DTS
(DATA_STECF_2_totlandingsDTS<-DATA_STECF_2_totlandings%>%filter(fishing_tech%in%FT1))
DATA_STECF_2_totlandingsDTS$OTB<-"OTB"
DATA_STECF_2_totlandingsDTS$sub_reg<-GSA

(DATA_STECF_2_totlandingsDTS_2440<-DATA_STECF_2_totlandingsDTS%>%filter(year%in%2009 & vessel_length%in%"VL2440"))
(DATA_STECF_2_totlandingsDTS_2440$year<-2008)
(DATA_STECF_2_totlandingsDTS<-rbind(DATA_STECF_2_totlandingsDTS_2440,DATA_STECF_2_totlandingsDTS))

(FULLDF_FINALX<-DATA_STECF_2_totlandingsDTS[,c(1,4,5,7,3,6)]%>%unite("FS",c(sub_reg:OTB), remove = T))
(FULLDF_FINALX<-FULLDF_FINALX%>%arrange(year,FS))

### PGP 
DATA_STECF_2_totlandingsPGP<-DATA_STECF_2_totlandings%>%filter(fishing_tech%in%FT2)
(DATA_STECF_2_totlandingsPGPP_NOTDUP<-DATA_STECF_2_totlandingsPGP%>%
    filter(vessel_length%in%c("VL0612","VL0006"))%>%
    group_by(sub_reg,country_code,fishing_tech,year)%>%
    summarise(totlandings=sum(as.numeric(totlandings))))

(DATA_STECF_2_totlandingsPGPP_NOTDUP$vessel_length<-"VL0012")
(DATA_STECF_2_totlandingsPGP_NOTDUP_2<-DATA_STECF_2_totlandingsPGP%>%filter(vessel_length%in%"VL1218"))
(DATA_STECF_2_totlandingsPGP<-rbind(DATA_STECF_2_totlandingsPGPP_NOTDUP,DATA_STECF_2_totlandingsPGP_NOTDUP_2))
DATA_STECF_2_totlandingsPGP$sub_reg<-GSA

(DATA_STECF_2_totlandingsPGP<-DATA_STECF_2_totlandingsPGP[,c(1,3,6,4,5)])
(DATA_STECF_2_totlandingsPGP<-DATA_STECF_2_totlandingsPGP%>%unite("FS",c(sub_reg:vessel_length), remove = T))

(FINALOLDDFX<-rbind(FULLDF_FINALX,DATA_STECF_2_totlandingsPGP))
(FINALOLDDFX%>%arrange(year,FS))
# check if there are missini data in some loa or years.
# the pgp VL1218 of 2013 are missing so I duplicated the 2012 data
(FINALOLDDFX_2013<-FINALOLDDFX%>%filter(year%in%2012 & FS%in%"GSA9_PGP_VL1218"))
FINALOLDDFX<-rbind(FINALOLDDFX,FINALOLDDFX_2013)

(FINALOLDDFX<-FINALOLDDFX%>%arrange(year,FS)) # this is the file ready for the old data for landings
#NOW sum old plus new 

(LANDX<-FULLDF_totland_totrev[,c(1,2,3)])
colnames(LANDX)[3]<-"Landing_Kg"
colnames(FINALOLDDFX)[3]<-"Landing_Kg"
(LAND_TOTAL_DF_MUT<-rbind(FINALOLDDFX,LANDX)) # this is ready for the file time series

#-----------------------------------------8)-fuelcosts ---------------------------------------------

# we now extract fuelcosts data 

(year<-c(2008:2020))
# Select your fleet segment.

fleet0<-"GSA9_DTS_VL0612_OTB"
fleet1<-"GSA9_DTS_VL1218_OTB"
fleet2<-"GSA9_DTS_VL1824_OTB"
fleet3<-"GSA9_DTS_VL2440_OTB"
fleet4<-"GSA9_PGP_VL0012"
fleet5<-"GSA9_PGP_VL1218"

(Fleet_segment0<-rep(fleet0,length(year)))
(Fleet_segment1<-rep(fleet1,length(year)))
(Fleet_segment2<-rep(fleet2,length(year)))
(Fleet_segment3<-rep(fleet3,length(year)))
(Fleet_segment4<-rep(fleet4,length(year)))
(Fleet_segment5<-rep(fleet4,length(year)))

(Fleet_segment<-c(Fleet_segment0,Fleet_segment1,Fleet_segment2,Fleet_segment3,Fleet_segment4,Fleet_segment5))
(variable_name<-rep("fuelcosts",length(Fleet_segment)))
VL0612value<-0
VL1218value<-1
VL1824value<-2
VL2440value<-3
VL0012pgpvalue<-4
VL1218pgpvalue<-5


VLOA1<-"VL0612"
VLOA2<-"VL1218"
VLOA3<-"VL1824"
VLOA4<-"VL2440"
VLOA5<-"VL0012"


(value<-c(rep(VL0612value,length(year)), rep(VL1218value,length(year)),rep(VL1824value,length(year)),rep(VL2440value,length(year)),rep(VL0012pgpvalue,length(year)),rep(VL1218pgpvalue,length(year)))) # if the costs change by year add those manually
(fishing_tech<-rep(FT1,length(Fleet_segment)))
(vessel_length<-c(rep(VLOA1,length(year)), 
                  rep(VLOA2,length(year)),
                  rep(VLOA3,length(year)),
                  rep(VLOA4,length(year)),
                  rep(VLOA5,length(year)),
                  rep(VLOA2,length(year))))
(DF_fuel<-data.frame(Fleet_segment,fishing_tech,vessel_length,year,variable_name,value))

#----------------------------------------9)-labour_costs--------------------------------

(variable_name<-rep("labourcosts",length(Fleet_segment)))
VL0612value<-0
VL1218value<-1
VL1824value<-2
VL2440value<-3
VL0012pgpvalue<-4
VL1218pgpvalue<-5

(value<-c(rep(VL0612value,length(year)), rep(VL1218value,length(year)),rep(VL1824value,length(year)),rep(VL2440value,length(year)),rep(VL0012pgpvalue,length(year)),rep(VL1218pgpvalue,length(year)))) # if the costs change by year add those manually
(fishing_tech<-rep(FT1,length(Fleet_segment)))
(vessel_length<-c(rep(VLOA1,length(year)), 
                  rep(VLOA2,length(year)),
                  rep(VLOA3,length(year)),
                  rep(VLOA4,length(year)),
                  rep(VLOA5,length(year)),
                  rep(VLOA2,length(year))))

(DF_labour_costs<-data.frame(Fleet_segment,fishing_tech,vessel_length,year,variable_name,value))

#----------------------------------------10)-othervariablecosts--------------------------

(variable_name<-rep("othervariablecosts",length(Fleet_segment)))
VL0612value<-0
VL1218value<-1
VL1824value<-2
VL2440value<-3
VL0012pgpvalue<-4
VL1218pgpvalue<-5

(value<-c(rep(VL0612value,length(year)), rep(VL1218value,length(year)),rep(VL1824value,length(year)),rep(VL2440value,length(year)),rep(VL0012pgpvalue,length(year)),rep(VL1218pgpvalue,length(year)))) # if the costs change by year add those manually
(fishing_tech<-rep(FT1,length(Fleet_segment)))

(vessel_length<-c(rep(VLOA1,length(year)),
                  rep(VLOA2,length(year)),
                  rep(VLOA3,length(year)),
                  rep(VLOA4,length(year)),
                  rep(VLOA5,length(year)),
                  rep(VLOA2,length(year))))

(DF_other_costs<-data.frame(Fleet_segment,fishing_tech,vessel_length,year,variable_name,value))
(FINAL_NEW_DF<-rbind(DF_fuel,DF_labour_costs,DF_other_costs))
BIG_FINAL_UNITED<-FINAL_NEW_DF

# the following lines are for the totalvariablecosts = fuelcosts + othervariablecost
#----------------------------------------11)-totalvariablecosts---------------------
(totalvariablecosts<-BIG_FINAL_UNITED%>%filter(variable_name%in%c("fuelcosts","othervariablecosts")))
(totalvariablecosts<-totalvariablecosts%>%
    group_by(Fleet_segment,year,vessel_length)%>%
    summarise(value=sum(value)))
(totalvariablecosts$variable_name<-"totalvariablecosts")
(totalvariablecosts<-totalvariablecosts[,c(1,2,5,4)])

# the following lines are for the revenues.discards.S1 normally = 0 
#----------------------------------------12)-revenues.discards.S1------------------
(year<-(2008:2020))
(Fleet_segment_uni<-unique(BIG_FINAL_UNITED$Fleet_segment))
(Fleet_segment<-rep(Fleet_segment_uni,length(year)))
(year<-rep(year,length(Fleet_segment_uni)))
(variable_name<-rep("revenues.discards.S1",length(year)))
(value<-rep(0,length(year)))
(revenues.discards.S1<-data.frame(Fleet_segment,year,variable_name,value))

# the following lines are for the commercialcosts normally = 0 
#------------------------------------13)-commercialcosts---------------------

(year<-(2008:2020))
(Fleet_segment_uni<-unique(BIG_FINAL_UNITED$Fleet_segment))
(Fleet_segment<-rep(Fleet_segment_uni,length(year)))
(year<-rep(year,length(Fleet_segment_uni)))
(variable_name<-rep("commercialcosts",length(year)))
(value<-rep(0,length(year)))
(commercialcosts<-data.frame(Fleet_segment,year,variable_name,value))

# the following lines are for the essentialcosts normally = 0 
#--------------------------------------14)-essentialcosts-----------------

(year<-(2008:2020))
(Fleet_segment_uni<-unique(BIG_FINAL_UNITED$Fleet_segment))
(Fleet_segment<-rep(Fleet_segment_uni,length(year)))
(year<-rep(year,length(Fleet_segment_uni)))
(variable_name<-rep("essentialcosts",length(year)))
(value<-rep(0,length(year)))
(essentialcosts<-data.frame(Fleet_segment,year,variable_name,value))

# the following lines are for the avoidablemaintenancecosts normally = 0 
#--------------------------------------15)-avoidablemaintenancecosts------
(year<-(2008:2020))
(Fleet_segment_uni<-unique(BIG_FINAL_UNITED$Fleet_segment))
(Fleet_segment<-rep(Fleet_segment_uni,length(year)))
(year<-rep(year,length(Fleet_segment_uni)))
(variable_name<-rep("avoidablemaintenancecosts",length(year)))
(value<-rep(0,length(year)))
(avoidablemaintenancecosts<-data.frame(Fleet_segment,year,variable_name,value))


# the following lines are for the unavoidablemaintenancecosts normally = 0 
#----------------------------------------16)-unavoidablemaintenancecosts---------

(year<-(2008:2020))
(Fleet_segment_uni<-unique(BIG_FINAL_UNITED$Fleet_segment))
(Fleet_segment<-rep(Fleet_segment_uni,length(year)))
(year<-rep(year,length(Fleet_segment_uni)))
(variable_name<-rep("unavoidablemaintenancecosts",length(year)))
(value<-rep(0,length(year)))
(unavoidablemaintenancecosts<-data.frame(Fleet_segment,year,variable_name,value))


# the following lines are for the otherincome normally = 0 
#------------------------------------17)-otherincome---------------------------

(year<-(2008:2020))
(Fleet_segment_uni<-unique(BIG_FINAL_UNITED$Fleet_segment))
(Fleet_segment<-rep(Fleet_segment_uni,length(year)))
(year<-rep(year,length(Fleet_segment_uni)))
(variable_name<-rep("otherincome",length(year)))
(value<-rep(0,length(year)))
(otherincome<-data.frame(Fleet_segment,year,variable_name,value))
(bigDF_of_0<-rbind(unavoidablemaintenancecosts,avoidablemaintenancecosts,essentialcosts,commercialcosts,revenues.discards.S1,otherincome))

library(tidyverse)
library(data.table)
library(readxl)
# The following lines are for:

###############################################################################
# GLOSSARY 
##############################################################################
# [Type of costs]	     [AER label]
#
# depreciation costs	totdepcost X
# other fixed costs	  totnovarcost X
# maintenance costs	  totrepcost X
# capital value	      totdeprep X
# opportunity costs	  capital value*(1+interest rate)/(1+inflation rate) -1
# employement	        totjob 
# other income	      tototherinc
# fuel costs	        totenercost
###############################################################################

dir<-"C:/Users/andre/OneDrive/Desktop/COISPA/BEMTOOL/Last_scripts/MapFS_2008_2018_Italy.xlsx" #this for data from 2008 to 2018

(data_2008<-read_xlsx(dir, sheet = 2)) 
(data_2009<-read_xlsx(dir, sheet = 3)) 
(data_2010<-read_xlsx(dir, sheet = 4)) 
(data_2011<-read_xlsx(dir, sheet = 5)) 
(data_2012<-read_xlsx(dir, sheet = 6)) 
(data_2013<-read_xlsx(dir, sheet = 7)) 
(data_2014<-read_xlsx(dir, sheet = 8))
(data_2015<-read_xlsx(dir, sheet = 9)) 
(data_2016<-read_xlsx(dir, sheet = 10)) 
(data_2017<-read_xlsx(dir, sheet = 11)) 
(data_2018<-read_xlsx(dir, sheet = 12)) 

(data_big<-rbind(data_2008,data_2009,data_2010,data_2011,data_2012,data_2013,data_2014,data_2015,data_2016,data_2017,data_2018))


#---------------------------18)-depreciationcosts------------------------------------
GSA<-"9"

#DTS
(depreciationcostDTS<-data_big%>%filter(ACRONYM%in%"totdepcost" & GSA%in%GSA & FISHING_TECH%in%FT1 & VESSEL_LENGTH%in%LOA1))
depreciationcostDTS$GSA<-GSA
depreciationcostDTS$OTB<-"OTB"
(depreciationcostDTS<-depreciationcostDTS[,c(5,7,8,9,4,1,2,3)])
(depreciationcostDTS<-unite(depreciationcostDTS,col="FS",c(GSA:OTB), remove = T))

#PGP
(depreciationcostPGP_NNDUP1<-data_big%>%filter(ACRONYM%in%"totdepcost" & GSA%in%GSA & FISHING_TECH%in%FT2 & VESSEL_LENGTH%in%LOA2))
(depreciationcostPGP_NNDUP1<-depreciationcostPGP_NNDUP1%>%
    group_by(ACRONYM,UNIT,YEAR,GSA,FISHING_TECH)%>%
    summarise(VALUE=sum(VALUE)))

(depreciationcostPGP_NNDUP1$VESSEL_LENGTH<-"VL0012")
(depreciationcostPGP_NNDUP2<-data_big%>%filter(ACRONYM%in%"totdepcost" & GSA%in%GSA & FISHING_TECH%in%FT2 & VESSEL_LENGTH%in%"VL1218"))

(depreciationcostPGP_NNDUP<-rbind(depreciationcostPGP_NNDUP1,depreciationcostPGP_NNDUP2))
(depreciationcostPGP_NNDUP<-depreciationcostPGP_NNDUP[,c(4,5,7,3,1,6,2)])
depreciationcostPGP_NNDUP$GSA<-GSA
(depreciationcostPGP_NNDUP<-unite(depreciationcostPGP_NNDUP, col="FS",c(GSA:VESSEL_LENGTH), remove = T))
(depreciationcost<-rbind(depreciationcostDTS,depreciationcostPGP_NNDUP))
(depreciationcost<-depreciationcost%>%arrange(YEAR,FS))

# Please check if something is missing. In this case for examples the VL2440 in 2008 is missing and we duplicate the 2009 values
(depreciationcostX<-
    depreciationcost%>%
    filter(YEAR%in%2009 & FS%in%"GSA9_DTS_VL2440_OTB"))
depreciationcostX$YEAR<-2008
(depreciationcost<-rbind(depreciationcostX,depreciationcost))
depreciationcost$ACRONYM<-"depreciationcosts"


# With the following line we will extract the "other fixed costs". 
#---------------------------------------------------19)-other fixed costs-------------------------------------
#DTS

(other_fixed_costsDTS<-data_big%>%filter(ACRONYM%in%"totnovarcost" & GSA%in%GSA & FISHING_TECH%in%FT1 & VESSEL_LENGTH%in%LOA1))
other_fixed_costsDTS$GSA<-GSA
other_fixed_costsDTS$OTB<-"OTB"
(other_fixed_costsDTS<-other_fixed_costsDTS[,c(5,7,8,9,4,1,2,3)])
(other_fixed_costsDTS<-unite(other_fixed_costsDTS,col="FS",c(GSA:OTB), remove = T))

#PGP
(other_fixed_costsPGP_NNDUP1<-data_big%>%filter(ACRONYM%in%"totnovarcost" & GSA%in%GSA & FISHING_TECH%in%FT2 & VESSEL_LENGTH%in%LOA2))
(other_fixed_costsPGP_NNDUP1<-other_fixed_costsPGP_NNDUP1%>%
    group_by(ACRONYM,UNIT,YEAR,GSA,SUPRA_REGION,FISHING_TECH)%>%
    summarise(VALUE=sum(VALUE)))

(other_fixed_costsPGP_NNDUP1$VESSEL_LENGTH<-"VL0012")
(other_fixed_costsPGP_NNDUP2<-data_big%>%filter(ACRONYM%in%"totnovarcost" & GSA%in%GSA & FISHING_TECH%in%FT2 & VESSEL_LENGTH%in%"VL1218"))
(other_fixed_costsPGP_NNDUP<-rbind(other_fixed_costsPGP_NNDUP1,other_fixed_costsPGP_NNDUP2))
(other_fixed_costsPGP_NNDUP<-other_fixed_costsPGP_NNDUP[,c(4,6,8,3,1,2,7)])
other_fixed_costsPGP_NNDUP$GSA<-GSA
(other_fixed_costsPGP_NNDUP<-unite(other_fixed_costsPGP_NNDUP, col="FS",c(GSA:VESSEL_LENGTH), remove = T))
(other_fixed_costs<-rbind(other_fixed_costsDTS,other_fixed_costsPGP_NNDUP))
(other_fixed_costs<-other_fixed_costs%>%arrange(YEAR,FS))

# please check if something is missing. In this case for examples the VL2440 in 2008 is missing and we duplicate the 2009 values
(other_fixed_costsX<-
    other_fixed_costs%>%
    filter(YEAR%in%2009 & FS%in%"GSA9_DTS_VL2440_OTB"))
other_fixed_costsX$YEAR<-2008
(other_fixed_costs<-rbind(other_fixed_costsX,other_fixed_costs))
(other_fixed_costs<-other_fixed_costs%>%arrange(YEAR,FS))
other_fixed_costs$ACRONYM<-"otherfixedcosts"

# With the following line we will extract the "maintenance costs". 

#-------------------------------------------------20)-maintenance costs------------------------------------

#DTS
(maintenance_costsDTS<-data_big%>%filter(ACRONYM%in%"totrepcost" & GSA%in%GSA & FISHING_TECH%in%FT1 & VESSEL_LENGTH%in%LOA1))
maintenance_costsDTS$GSA<-GSA
maintenance_costsDTS$OTB<-"OTB"
(maintenance_costsDTS<-maintenance_costsDTS[,c(5,7,8,9,4,1,2,3)])
(maintenance_costsDTS<-unite(maintenance_costsDTS,col="FS",c(GSA:OTB), remove = T))

#PGP
(maintenance_costsPGP_NNDUP1<-data_big%>%filter(ACRONYM%in%"totrepcost" & GSA%in%GSA & FISHING_TECH%in%FT2 & VESSEL_LENGTH%in%LOA2))
(maintenance_costsPGP_NNDUP1<-maintenance_costsPGP_NNDUP1%>%
    group_by(ACRONYM,UNIT,YEAR,GSA,SUPRA_REGION,FISHING_TECH)%>%
    summarise(VALUE=sum(VALUE)))

(maintenance_costsPGP_NNDUP1$VESSEL_LENGTH<-"VL0012")
(maintenance_costsPGP_NNDUP2<-data_big%>%filter(ACRONYM%in%"totrepcost" & GSA%in%GSA & FISHING_TECH%in%FT2 & VESSEL_LENGTH%in%"VL1218"))
(maintenance_costsPGP_NNDUP<-rbind(maintenance_costsPGP_NNDUP1,maintenance_costsPGP_NNDUP2))
(maintenance_costsPGP_NNDUP<-maintenance_costsPGP_NNDUP[,c(4,6,8,3,1,2,7)])

maintenance_costsPGP_NNDUP$GSA<-GSA
(maintenance_costsPGP_NNDUP<-unite(maintenance_costsPGP_NNDUP, col="FS",c(GSA:VESSEL_LENGTH), remove = T))
(maintenance_costs<-rbind(maintenance_costsDTS,maintenance_costsPGP_NNDUP))
(maintenance_costs<-maintenance_costs%>%arrange(YEAR,FS))

# Please check if something is missing. 
# In this case for examples the VL2440 in 2008 is missing and we duplicate the 2009 values

(maintenance_costsX<-
    maintenance_costs%>%
    filter(YEAR%in%2009 & FS%in%"GSA9_DTS_VL2440_OTB_MDD"))
maintenance_costsX$YEAR<-2008
(maintenance_costs<-rbind(maintenance_costsX,maintenance_costs))
(maintenance_costs<-maintenance_costs%>%arrange(YEAR,FS))
maintenance_costs$ACRONYM<-"maintenancecosts"

# With the following line we will extract the "Capital value".

#------------------------------------------21)-Capital value------------------------------------------

#DTS

(Capital_valueDTS<-data_big%>%filter(ACRONYM%in%"totdeprep" & GSA%in%GSA & FISHING_TECH%in%FT1 & VESSEL_LENGTH%in%LOA1))
Capital_valueDTS$GSA<-GSA
Capital_valueDTS$OTB<-"OTB"
(Capital_valueDTS<-Capital_valueDTS[,c(5,7,8,9,4,1,2,3)])
(Capital_valueDTS<-unite(Capital_valueDTS,col="FS",c(GSA:OTB), remove = T))

#PGP
(Capital_valuePGP_NNDUP1<-data_big%>%filter(ACRONYM%in%"totdeprep" & GSA%in%GSA & FISHING_TECH%in%FT2 & VESSEL_LENGTH%in%LOA2))
(Capital_valuePGP_NNDUP1<-Capital_valuePGP_NNDUP1%>%
    group_by(ACRONYM,UNIT,YEAR,GSA,SUPRA_REGION,FISHING_TECH)%>%
    summarise(VALUE=sum(VALUE)))
(Capital_valuePGP_NNDUP1$VESSEL_LENGTH<-"VL0012")
(Capital_valuePGP_NNDUP2<-data_big%>%filter(ACRONYM%in%"totdeprep" & GSA%in%GSA & FISHING_TECH%in%FT2 & VESSEL_LENGTH%in%"VL1218"))
(Capital_valuePGP_NNDUP<-rbind(Capital_valuePGP_NNDUP1,Capital_valuePGP_NNDUP2))

(Capital_valuePGP_NNDUP<-Capital_valuePGP_NNDUP[,c(4,6,8,3,1,2,7)])
(Capital_valuePGP_NNDUP$GSA<-GSA)
(Capital_valuePGP_NNDUP<-unite(Capital_valuePGP_NNDUP, col="FS",c(GSA:VESSEL_LENGTH), remove = T))

(Capital_value<-rbind(Capital_valueDTS,Capital_valuePGP_NNDUP))
(Capital_value<-Capital_value%>%arrange(YEAR,FS))

# Please check if something is missing. 
# In this case for examples the VL2440 in 2008 is missing and we duplicate the 2009 values
(Capital_valueX<-Capital_value%>%
    filter(YEAR%in%2009 & FS%in%"GSA9_DTS_VL2440_OTB"))
Capital_valueX$YEAR<-2008
(Capital_value<-rbind(Capital_valueX,Capital_value))
(Capital_value<-Capital_value%>%arrange(YEAR,FS))
Capital_value$ACRONYM<-"capitalvalue"

# With the following line we will extract the "opportunity costs == capital value*(1+interest rate)/(1+inflation rate) -1" 

#--------------------------------------------22)-opportunity costs------------------------------------

#DTS

###############################################################################################
# please insert below the inflation and interest rate of the country you are dealing with. 
# we used inflation and interest rate of Italy as example

#-------------- I T A L Y --------------

#interest rate ITA 2008- 2020 FROM https://data.worldbank.org/indicator/FR.INR.RINR?locations=IT
intr<-c(4.33,	 3.03,	3.58,	2.94,	3.62,	3.95,	3.92,	3.17,	2.34,	2.26,	1.59)/100  #,	1.67,	1.15 = ( 2019, 2020)
intr = as.data.frame(intr)
intr$year = c(2008:2018)

# inflation rate ITA 2008-2021 FROM https://data.worldbank.org/indicator/FP.CPI.TOTL.ZG?locations=IT

inflr<-c(3.35,	0.77,	1.53,	2.78,	3.04,	1.22,	0.24,	0.04,	-0.09,	1.23,	1.14)/100 #,	0.61,	-0.14,	1.87 = ( 2019, 2020, 2021)
inflr = as.data.frame(inflr)
inflr$year = c(2008:2018)
# ------------------------------------
#########################################################

DF<-data.frame( 
  FS=Capital_value$FS,
  YEAR=Capital_value$YEAR,
  ACRONYM=Capital_value$ACRONYM,
  VALUE=integer(length(Capital_value$VALUE)),
  UNIT=Capital_value$UNIT,
  stringsAsFactors = FALSE)


for (a in 1:nrow(DF)){
  DF$VALUE[a]<- Capital_value$VALUE[a]*(1+intr[intr$year==DF[a,"YEAR"],"year"])/(1+inflr[inflr$year==DF[a,"YEAR"],"year"]) - 1
  
}
DF$ACRONYM<-"opportunity_costs"

opportunity_costs<-DF
opportunity_costs$ACRONYM<-"opportunitycosts"

# With the following line we will extract the "employement" 
.
#--------------------------------------------------23) employement----------------
#DTS


(employementDTS<-data_big%>%filter(ACRONYM%in%"totjob" & GSA%in%GSA & FISHING_TECH%in%FT1 & VESSEL_LENGTH%in%LOA1))
(employementDTS$GSA<-GSA)
(employementDTS$OTB<-"OTB")
(employementDTS<-employementDTS[,c(5,7,8,9,4,1,2,3)])
(employementDTS<-unite(employementDTS,col="FS",c(GSA:OTB), remove = T))

#PGP
(employementPGP_NNDUP1<-data_big%>%filter(ACRONYM%in%"totjob" & GSA%in%GSA & FISHING_TECH%in%FT2 & VESSEL_LENGTH%in%LOA2))
(employementPGP_NNDUP1<-employementPGP_NNDUP1%>%
    group_by(ACRONYM,UNIT,YEAR,GSA,SUPRA_REGION,FISHING_TECH)%>%
    summarise(VALUE=sum(VALUE)))

(employementPGP_NNDUP1$VESSEL_LENGTH<-"VL0012")
(employementPGP_NNDUP2<-data_big%>%filter(ACRONYM%in%"totjob" & GSA%in%GSA & FISHING_TECH%in%FT2 & VESSEL_LENGTH%in%"VL1218"))
(employementPGP_NNDUP<-rbind(employementPGP_NNDUP1,employementPGP_NNDUP2))

(employementPGP_NNDUP<-employementPGP_NNDUP[,c(4,6,8,3,1,2,7)])
employementPGP_NNDUP$GSA<-GSA
(employementPGP_NNDUP<-unite(employementPGP_NNDUP, col="FS",c(GSA:VESSEL_LENGTH), remove = T))

(employement<-rbind(employementDTS,employementPGP_NNDUP))
(employement<-employement%>%arrange(YEAR,FS))

# Please check if something is missing. In this case for examples the VL2440 in 2008 is missing and we duplicate the 2009 values
(employementX<-
    employement%>%
    filter(YEAR%in%2009 & FS%in%"GSA9_DTS_VL2440_OTB"))
employementX$YEAR<-2008
(employement<-rbind(employementX,employement))
(employement<-employement%>%arrange(YEAR,FS))
employement$ACRONYM<-"employement"

# With the following line we will extract the "total fixed costs" which are equal to otherfixedcosts 
# ------------------------------------24)-total fixed costs--------------------------

total_fixed_costs<-other_fixed_costs
total_fixed_costs$ACRONYM<-"totalfixedcosts"

# With the following line we will extract the "totalcapitalcosts"
#---------------------------------------25)-totalcapitalcosts-----------------------------

(total_capital_costs<-rbind(opportunity_costs,depreciationcost))
(total_capital_costs<-total_capital_costs%>%group_by(FS,YEAR,UNIT)%>%
    summarise(VALUE=sum(VALUE)))
total_capital_costs$ACRONYM<-"totalcapitalcosts"

#### Now you can add all the costs DFs(ALLDATAFD,LAND_TOTAL_DF_ALLSPEC,REV_TOTAL_DF_ALLSPEC,REV_TOTAL_DF_MUT,BIG_FINAL_UNITED,totalvariablecosts) in a single Big One 

colnames(BIG_FINAL_UNITED)[4]<-"year"
colnames(totalvariablecosts)[2]<-"year"
colnames(totalvariablecosts)[1]<-"FS"
(DF6costs<-bigDF_of_0)
colnames(DF6costs)[1]<-"FS"

#unique(DF6costs$Fleet_segment)
(DF8costs<-rbind(depreciationcost, other_fixed_costs, maintenance_costs, Capital_value, opportunity_costs,employement,total_fixed_costs,total_capital_costs))
(DF8costs<-DF8costs[,c(1:4)])
colnames(DF8costs)[2]<-"year"
colnames(DF8costs)[3]<-"variable_name"
colnames(DF8costs)[4]<-"value"
COST1<-rbind(DF6costs,DF8costs) 
COST1<-rbind(COST1,totalvariablecosts)
(BIG_FINAL_UNITED2<-BIG_FINAL_UNITED[,c(1,4,5,6)])
colnames(BIG_FINAL_UNITED2)[1]<-"FS"
COST2<-rbind(COST1,BIG_FINAL_UNITED2)
REV_TOTAL_DF_MUT$variable_name<-"totalrevenues_S1"
colnames(REV_TOTAL_DF_MUT)[3]<-"value"
COST3<-rbind(COST2,REV_TOTAL_DF_MUT)
REV_TOTAL_DF_ALLSPEC$variable_name<-"totalrevenues"
colnames(REV_TOTAL_DF_ALLSPEC)[3]<-"value"
COST4<-rbind(COST3,REV_TOTAL_DF_ALLSPEC)
COST5<-rbind(COST4,LAND_TOTAL_DF_ALLSPEC)
ALLDATAFD$variable_name<-"maxseadays"
COST6<-rbind(COST5,ALLDATAFD)

unique(COST6$variable_name) # check the amount it should be 22
unique(COST6$FS)
colnames(COST6)[3]<-"variable_code"
(COST6A<-COST6%>%filter(variable_code%in%c("revenues.discards.S1","totalrevenues_S1")))
COST6A$species<-SP
(COST6B<-COST6%>%filter(!variable_code%in%c("revenues.discards.S1","totalrevenues_S1")))
COST6B$species<-"ALL"
(COST6<-rbind(COST6A,COST6B))
(COST6<-COST6%>%arrange(year,FS))


(Fleet_segments <- sort(unique(COST6$FS)))
FS_ready <- Fleet_segments 
ts<-c(2006:2020)
trans_year=c(2020,2021)

#data_frame <- COST6

FirstColumn= c("casestudy.maxavgseadays",
               "casestudy.totallandings", # DA FDI
               "casestudy.revenues.S1",# DA FDI
               "casestudy.totalrevenues",# DA FDI
               "casestudy.revenues.discard.S1",
               "casestudy.fuelcosts",
               "casestudy.commercialcosts",
               "casestudy.othervariablecosts",
               "casestudy.totalvariablecosts",
               "casestudy.maintenancecosts",
               "casestudy.otherfixedcosts",
               "casestudy.essentialcosts",
               "casestudy.avoidablemaintenancecosts",
               "casestudy.unavoidablemaintenancecosts",
               "casestudy.totalfixedcosts",
               "casestudy.labourcosts",
               "casestudy.depreciationcosts",
               "casestudy.opportunitycosts",
               "casestudy.totalcapitalcosts",
               "casestudy.otherincome",
               "casestudy.employment",
               "casestudy.capitalvalue")

stks=c("MUT")
(nb_stk=length(stks))

DFTOT<-list()

for (x in 1:length(FS_ready)){
  
  {
    
    (DF0=as.data.frame(matrix(0,nrow=(20+2*nb_stk),ncol=length(ts))))
    (colnames(DF0)=ts)
    (data_frame1=COST6[COST6$FS==FS_ready[x],])
    
    ty=1
    #------------------------------
    #maxseadays
    (data_frame=data_frame1[data_frame1$variable_code=="maxseadays",] )
    
    if (nrow(data_frame)>0){
      (data_frame=data_frame[as.character(data_frame$value)!="NULL",])
      
      for (rr in 1:nrow(data_frame)){
        
        ( year=data_frame$year[rr] )
        ( DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        
      }
      
    } else {
      DF0[ty,]=0  
    }
    
    ty=2
    #------------------------------
    #total landing
    (data_frame=data_frame1[data_frame1$variable_code=="totallandings",] )
    
    if (nrow(data_frame)>0){
      (data_frame=data_frame[as.character(data_frame$value)!="NULL",])
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    ##----------------------------
    for (st in 1:nb_stk) {
      ty=3 + (st-1) 
      #revenues by stock
      
      (data_frame<-data_frame1%>%filter(variable_code=="totalrevenues_S1" & species==stks[st]))
      
      if (nrow(data_frame)>0){
        data_frame=data_frame[as.character(data_frame$value)!="NULL",]
        
        # (FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
        
        #(colnames(FDI_data_temp)=c("FS","year","value"))
        
        for (rr in 1:nrow(data_frame)){
          
          ( year=data_frame$year[rr] )
          ( DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
          DF0[ty,]<-round(as.numeric(DF0[ty,],0))
        }
        
      } else {
        DF0[ty,]=0  
      }
      
    }
    
    #------------------------------
    ty=3 + st
    #total revenues by stock all species
    (data_frame<-data_frame1%>%filter(variable_code=="totalrevenues" ))
    
    if (nrow(data_frame)>0){
      
      #( FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
      
      #colnames(FDI_data_temp)=c("FS","year","value")
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    #------------------------------
    ty=4 + st
    # revenues.discards.S1 
    
    (data_frame<-data_frame1%>%filter(variable_code=="revenues.discards.S1" & species==stks[st]))
    
    
    if (nrow(data_frame)>0){
      
      #( FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
      
      #colnames(FDI_data_temp)=c("FS","year","value")
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    #----------------------------------------------------------
    ty=5 + st
    # fuelcosts
    
    (data_frame<-data_frame1%>%filter(variable_code=="fuelcosts" ))
    
    if (nrow(data_frame)>0){
      
      #( FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
      
      #colnames(FDI_data_temp)=c("FS","year","value")
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    
    #------------------------------
    ty=6 + st
    # commercialcosts
    
    (data_frame<-data_frame1%>%filter(variable_code=="commercialcosts" ))
    
    if (nrow(data_frame)>0){
      
      #( FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
      
      #colnames(FDI_data_temp)=c("FS","year","value")
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    # --------------------------------------
    ty=7 + st
    # othervariablecosts
    
    (data_frame<-data_frame1%>%filter(variable_code=="othervariablecosts" ))
    
    if (nrow(data_frame)>0){
      
      #( FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
      
      #colnames(FDI_data_temp)=c("FS","year","value")
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    #------------------------------
    
    ty=8 + st
    # totalvariablecosts
    
    (data_frame<-data_frame1%>%filter(variable_code=="totalvariablecosts" ))
    
    if (nrow(data_frame)>0){
      
      #( FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
      
      #colnames(FDI_data_temp)=c("FS","year","value")
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    #------------------------------
    
    ty=9 + st
    # maintenancecosts
    
    (data_frame<-data_frame1%>%filter(variable_code=="maintenancecosts" ))
    
    if (nrow(data_frame)>0){
      
      #( FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
      
      #colnames(FDI_data_temp)=c("FS","year","value")
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    #------------------------------
    
    
    ty=10 + st
    # otherfixedcosts
    
    (data_frame<-data_frame1%>%filter(variable_code=="otherfixedcosts" ))
    
    if (nrow(data_frame)>0){
      
      #( FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
      
      #colnames(FDI_data_temp)=c("FS","year","value")
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    #------------------------------
    
    
    ty=11 + st
    # essentialcosts
    
    (data_frame<-data_frame1%>%filter(variable_code=="essentialcosts" ))
    
    if (nrow(data_frame)>0){
      
      #( FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
      
      #colnames(FDI_data_temp)=c("FS","year","value")
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    
    #------------------------------
    
    ty=12 + st
    # avoidablemaintenancecosts
    
    (data_frame<-data_frame1%>%filter(variable_code=="avoidablemaintenancecosts" ))
    
    if (nrow(data_frame)>0){
      
      #( FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
      
      #colnames(FDI_data_temp)=c("FS","year","value")
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    
    #------------------------------
    
    
    ty=13 + st
    # unavoidablemaintenancecosts
    
    (data_frame<-data_frame1%>%filter(variable_code=="unavoidablemaintenancecosts" ))
    
    if (nrow(data_frame)>0){
      
      #( FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
      
      #colnames(FDI_data_temp)=c("FS","year","value")
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    #------------------------------
    
    
    ty=14 + st
    # totalfixedcosts 
    
    (data_frame<-data_frame1%>%filter(variable_code=="totalfixedcosts" ))
    
    if (nrow(data_frame)>0){
      
      #( FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
      
      #colnames(FDI_data_temp)=c("FS","year","value")
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    
    
    #------------------------------
    
    ty=15 + st
    # labourcosts 
    
    (data_frame<-data_frame1%>%filter(variable_code=="labourcosts" ))
    
    if (nrow(data_frame)>0){
      
      #( FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
      
      #colnames(FDI_data_temp)=c("FS","year","value")
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    
    #------------------------------
    ty=16 + st
    # depreciationcosts 
    
    (data_frame<-data_frame1%>%filter(variable_code=="depreciationcosts" ))
    
    if (nrow(data_frame)>0){
      
      #( FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
      
      #colnames(FDI_data_temp)=c("FS","year","value")
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    #------------------------------
    
    ty=17 + st
    # opportunitycosts 
    
    (data_frame<-data_frame1%>%filter(variable_code=="opportunitycosts" ))
    
    if (nrow(data_frame)>0){
      
      #( FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
      
      #colnames(FDI_data_temp)=c("FS","year","value")
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    
    #------------------------------
    
    ty=18 + st
    # totalcapitalcosts 
    
    (data_frame<-data_frame1%>%filter(variable_code=="totalcapitalcosts" ))
    
    if (nrow(data_frame)>0){
      
      #( FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
      
      #colnames(FDI_data_temp)=c("FS","year","value")
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    #------------------------------
    
    ty=19 + st
    # otherincome 
    
    (data_frame<-data_frame1%>%filter(variable_code=="otherincome" ))
    
    if (nrow(data_frame)>0){
      
      #( FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
      
      #colnames(FDI_data_temp)=c("FS","year","value")
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    #------------------------------
    
    ty=20 + st
    # employment 
    
    (data_frame<-data_frame1%>%filter(variable_code=="employment" ))
    
    if (nrow(data_frame)>0){
      
      #( FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
      
      #colnames(FDI_data_temp)=c("FS","year","value")
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    #------------------------------
    
    ty=21 + st
    # capitalvalue 
    
    (data_frame<-data_frame1%>%filter(variable_code=="capitalvalue" ))
    
    if (nrow(data_frame)>0){
      
      #( FDI_data_temp=aggregate(as.numeric(FDI_data_temp$totvallandg),by=list(FDI_data_temp$FS,FDI_data_temp$year),FUN="sum"))
      
      #colnames(FDI_data_temp)=c("FS","year","value")
      
      for (rr in 1:nrow(data_frame)){
        
        (year=data_frame$year[rr] )
        (DF0[ty,colnames(DF0)==year]=data_frame$value[rr])
        DF0[ty,]<-round(as.numeric(DF0[ty,],0))
      }
      
    } else {
      DF0[ty,]=0  
      
    }
    DFTOT[[x]]<-DF0
  }
  
}

FINALDF<-do.call(cbind, DFTOT)
(rownames(FINALDF)<-FirstColumn)

(DFhead=as.data.frame(matrix(NA, nrow=4, ncol=length(FINALDF))))
(colnames(DFhead)=colnames(FINALDF))
(rownames(DFhead)<-c("Units: days","casestudy.fleetsegmentcode","casestudy.fishingtechnique","casestudy.loa"))
DFhead[1,]<-colnames(FINALDF)
DFhead[2,]<-rep(FS_ready,each=length(ts))

(TIME_SERIES<-rbind(DFhead,FINALDF))

# Please add your directory
(dir1="C:/INPUT")
# write.table(TIME_SERIES,paste(dir1,"/TS.csv",sep=""),sep=";",row.names=T, col.names = F) 
write.table(TIME_SERIES,"C:..../Time_Series.csv",sep=";",row.names=T, col.names = F) 
```
